<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Protocol Buffers Documentation – C++ Reference</title><link>https://protobuf.dev/reference/cpp/</link><description>Recent content in C++ Reference on Protocol Buffers Documentation</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://protobuf.dev/reference/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>Reference: C++ Generated Code Guide</title><link>https://protobuf.dev/reference/cpp/cpp-generated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/reference/cpp/cpp-generated/</guid><description>
&lt;p>Any differences between proto2 and proto3 generated code are highlighted - note
that these differences are in the generated code as described in this document,
not the base message classes/interfaces, which are the same in both versions.
You should read the
&lt;a href="https://protobuf.dev/programming-guides/proto2/">proto2 language guide&lt;/a>
and/or
&lt;a href="https://protobuf.dev/programming-guides/proto3/">proto3 language guide&lt;/a>
before reading this document.&lt;/p>
&lt;h2 id="invocation">Compiler Invocation&lt;/h2>
&lt;p>The protocol buffer compiler produces C++ output when invoked with the
&lt;code>--cpp_out=&lt;/code> command-line flag. The parameter to the &lt;code>--cpp_out=&lt;/code> option is the
directory where you want the compiler to write your C++ output. The compiler
creates a header file and an implementation file for each &lt;code>.proto&lt;/code> file input.
The names of the output files are computed by taking the name of the &lt;code>.proto&lt;/code>
file and making two changes:&lt;/p>
&lt;ul>
&lt;li>The extension (&lt;code>.proto&lt;/code>) is replaced with either &lt;code>.pb.h&lt;/code> or &lt;code>.pb.cc&lt;/code> for the
header or implementation file, respectively.&lt;/li>
&lt;li>The proto path (specified with the &lt;code>--proto_path=&lt;/code> or &lt;code>-I&lt;/code> command-line
flag) is replaced with the output path (specified with the &lt;code>--cpp_out=&lt;/code>
flag).&lt;/li>
&lt;/ul>
&lt;p>So, for example, let&amp;rsquo;s say you invoke the compiler as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>protoc --proto_path&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>src --cpp_out&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>build/gen src/foo.proto src/bar/baz.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will read the files &lt;code>src/foo.proto&lt;/code> and &lt;code>src/bar/baz.proto&lt;/code> and
produce four output files: &lt;code>build/gen/foo.pb.h&lt;/code>, &lt;code>build/gen/foo.pb.cc&lt;/code>,
&lt;code>build/gen/bar/baz.pb.h&lt;/code>, &lt;code>build/gen/bar/baz.pb.cc&lt;/code>. The compiler will
automatically create the directory &lt;code>build/gen/bar&lt;/code> if necessary, but it will
&lt;em>not&lt;/em> create &lt;code>build&lt;/code> or &lt;code>build/gen&lt;/code>; they must already exist.&lt;/p>
&lt;h2 id="package">Packages&lt;/h2>
&lt;p>If a &lt;code>.proto&lt;/code> file contains a &lt;code>package&lt;/code> declaration, the entire contents of the
file will be placed in a corresponding C++ namespace. For example, given the
&lt;code>package&lt;/code> declaration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All declarations in the file will reside in the &lt;code>foo::bar&lt;/code> namespace.&lt;/p>
&lt;h2 id="message">Messages&lt;/h2>
&lt;p>Given a simple message declaration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The protocol buffer compiler generates a class called &lt;code>Foo&lt;/code>, which publicly
derives from
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.message/">&lt;code>google::protobuf::Message&lt;/code>&lt;/a>.
The class is a concrete class; no pure-virtual methods are left unimplemented.
Methods that are virtual in &lt;code>Message&lt;/code> but not pure-virtual may or may not be
overridden by &lt;code>Foo&lt;/code>, depending on the optimization mode. By default, &lt;code>Foo&lt;/code>
implements specialized versions of all methods for maximum speed. However, if
the &lt;code>.proto&lt;/code> file contains the line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">optimize_for&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">CODE_SIZE&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then &lt;code>Foo&lt;/code> will override only the minimum set of methods necessary to function
and rely on reflection-based implementations of the rest. This significantly
reduces the size of the generated code, but also reduces performance.
Alternatively, if the &lt;code>.proto&lt;/code> file contains:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">optimize_for&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">LITE_RUNTIME&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then &lt;code>Foo&lt;/code> will include fast implementations of all methods, but will implement
the
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.message_lite/">&lt;code>google::protobuf::MessageLite&lt;/code>&lt;/a>
interface, which only contains a subset of the methods of &lt;code>Message&lt;/code>. In
particular, it does not support descriptors or reflection. However, in this
mode, the generated code only needs to link against &lt;code>libprotobuf-lite.so&lt;/code>
(&lt;code>libprotobuf-lite.lib&lt;/code> on Windows) instead of &lt;code>libprotobuf.so&lt;/code>
(&lt;code>libprotobuf.lib&lt;/code>). The &amp;ldquo;lite&amp;rdquo; library is much smaller than the full library,
and is more appropriate for resource-constrained systems such as mobile phones.&lt;/p>
&lt;p>You should &lt;em>not&lt;/em> create your own &lt;code>Foo&lt;/code> subclasses. If you subclass this class
and override a virtual method, the override may be ignored, as many generated
method calls are de-virtualized to improve performance.&lt;/p>
&lt;p>The &lt;code>Message&lt;/code> interface defines methods that let you check, manipulate, read, or
write the entire message, including parsing from and serializing to binary
strings.&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool ParseFromString(const string&amp;amp; data)&lt;/code>: Parse the message from the given
serialized binary string (also known as wire format).&lt;/li>
&lt;li>&lt;code>bool SerializeToString(string* output) const&lt;/code>: Serialize the given message
to a binary string.&lt;/li>
&lt;li>&lt;code>string DebugString()&lt;/code>: Return a string giving the &lt;code>text_format&lt;/code>
representation of the proto (should only be used for debugging).&lt;/li>
&lt;/ul>
&lt;p>In addition to these methods, the &lt;code>Foo&lt;/code> class defines the following methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Foo()&lt;/code>: Default constructor.&lt;/li>
&lt;li>&lt;code>~Foo()&lt;/code>: Default destructor.&lt;/li>
&lt;li>&lt;code>Foo(const Foo&amp;amp; other)&lt;/code>: Copy constructor.&lt;/li>
&lt;li>&lt;code>Foo(Foo&amp;amp;&amp;amp; other)&lt;/code>: Move constructor.&lt;/li>
&lt;li>&lt;code>Foo&amp;amp; operator=(const Foo&amp;amp; other)&lt;/code>: Assignment operator.&lt;/li>
&lt;li>&lt;code>Foo&amp;amp; operator=(Foo&amp;amp;&amp;amp; other)&lt;/code>: Move-assignment operator.&lt;/li>
&lt;li>&lt;code>void Swap(Foo* other)&lt;/code>: Swap content with another message.&lt;/li>
&lt;li>&lt;code>const UnknownFieldSet&amp;amp; unknown_fields() const&lt;/code>: Returns the set of unknown
fields encountered while parsing this message. If &lt;code>option optimize_for = LITE_RUNTIME&lt;/code> is specified in the &lt;code>.proto&lt;/code> file, then the return type
changes to &lt;code>std::string&amp;amp;&lt;/code>.&lt;/li>
&lt;li>&lt;code>UnknownFieldSet* mutable_unknown_fields()&lt;/code>: Returns a pointer to the
mutable set of unknown fields encountered while parsing this message. If
&lt;code>option optimize_for = LITE_RUNTIME&lt;/code> is specified in the &lt;code>.proto&lt;/code> file, then
the return type changes to &lt;code>std::string*&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>The class also defines the following static methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>static const Descriptor* descriptor()&lt;/code>: Returns the type&amp;rsquo;s descriptor. This
contains information about the type, including what fields it has and what
their types are. This can be used with
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.message/#Reflection">reflection&lt;/a>
to inspect fields programmatically.&lt;/li>
&lt;li>&lt;code>static const Foo&amp;amp; default_instance()&lt;/code>: Returns a const singleton instance
of &lt;code>Foo&lt;/code> which is identical to a newly-constructed instance of &lt;code>Foo&lt;/code> (so all
singular fields are unset and all repeated fields are empty). Note that the
default instance of a message can be used as a factory by calling its
&lt;code>New()&lt;/code> method.&lt;/li>
&lt;/ul>
&lt;h3 id="generated-filenames">Generated Filenames&lt;/h3>
&lt;p>&lt;a href="https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/compiler/cpp/helpers.cc#L4">Reserved keywords&lt;/a>
are appended with an underscore in the generated output.&lt;/p>
&lt;p>For example, the following proto3 definition syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">MyMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">myFalse&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>generates the following partial output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">clear_false_&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">false_&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">set_false_&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Arg_&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">arg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Args_&lt;/span>&lt;span style="color:#000;font-weight:bold">...&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">mutable_false_&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">PROTOBUF_NODISCARD&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">release_false_&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">set_allocated_false_&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">ptr&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">clear_myfalse&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">myfalse&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">set_myfalse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Arg_&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">arg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Args_&lt;/span>&lt;span style="color:#000;font-weight:bold">...&lt;/span> &lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">mutable_myfalse&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">PROTOBUF_NODISCARD&lt;/span> &lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">release_myfalse&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">set_allocated_myfalse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">ptr&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nested-types">Nested Types&lt;/h3>
&lt;p>A message can be declared inside another message. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, the compiler generates two classes: &lt;code>Foo&lt;/code> and &lt;code>Foo_Bar&lt;/code>. In
addition, the compiler generates a typedef inside &lt;code>Foo&lt;/code> as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">typedef&lt;/span> &lt;span style="color:#000">Foo_Bar&lt;/span> &lt;span style="color:#000">Bar&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This means that you can use the nested type&amp;rsquo;s class as if it was the nested
class &lt;code>Foo::Bar&lt;/code>. However, note that C++ does not allow nested types to be
forward-declared. If you want to forward-declare &lt;code>Bar&lt;/code> in another file and use
that declaration, you must identify it as &lt;code>Foo_Bar&lt;/code>.&lt;/p>
&lt;h2 id="fields">Fields&lt;/h2>
&lt;p>In addition to the methods described in the previous section, the protocol
buffer compiler generates a set of accessor methods for each field defined
within the message in the &lt;code>.proto&lt;/code> file. These methods are in
lower-case/snake-case, such as &lt;code>has_foo()&lt;/code> and &lt;code>clear_foo()&lt;/code>.&lt;/p>
&lt;p>As well as accessor methods, the compiler generates an integer constant for each
field containing its field number. The constant name is the letter &lt;code>k&lt;/code>, followed
by the field name converted to camel-case, followed by &lt;code>FieldNumber&lt;/code>. For
example, given the field &lt;code>optional int32 foo_bar = 5;&lt;/code>, the compiler will
generate the constant &lt;code>static const int kFooBarFieldNumber = 5;&lt;/code>.&lt;/p>
&lt;p>For field accessors returning a &lt;code>const&lt;/code> reference, that reference may be
invalidated when the next modifying access is made to the message. This includes
calling any non-&lt;code>const&lt;/code> accessor of any field, calling any non-&lt;code>const&lt;/code> method
inherited from &lt;code>Message&lt;/code> or modifying the message through other ways (for
example, by using the message as the argument of &lt;code>Swap()&lt;/code>). Correspondingly, the
address of the returned reference is only guaranteed to be the same across
different invocations of the accessor if no modifying access was made to the
message in the meantime.&lt;/p>
&lt;p>For field accessors returning a pointer, that pointer may be invalidated when
the next modifying or non-modifying access is made to the message. This
includes, regardless of constness, calling any accessor of any field, calling
any method inherited from &lt;code>Message&lt;/code> or accessing the message through other ways
(for example, by copying the message using the copy constructor).
Correspondingly, the value of the returned pointer is never guaranteed to be the
same across two different invocations of the accessor.&lt;/p>
&lt;h3 id="numeric">Optional Numeric Fields (proto2 and proto3)&lt;/h3>
&lt;p>For either of these field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool has_foo() const&lt;/code>: Returns &lt;code>true&lt;/code> if the field is set.&lt;/li>
&lt;li>&lt;code>int32 foo() const&lt;/code>: Returns the current value of the field. If the field is
not set, returns the default value.&lt;/li>
&lt;li>&lt;code>void set_foo(int32 value)&lt;/code>: Sets the value of the field. After calling
this, &lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code> and &lt;code>foo()&lt;/code> will return &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Clears the value of the field. After calling this,
&lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code> and &lt;code>foo()&lt;/code> will return the default value.&lt;/li>
&lt;/ul>
&lt;p>For other numeric field types (including &lt;code>bool&lt;/code>), &lt;code>int32&lt;/code> is replaced with the
corresponding C++ type according to the
&lt;a href="https://protobuf.dev/programming-guides/proto3/#scalar">scalar value types table&lt;/a>.&lt;/p>
&lt;h3 id="implicit-numeric">Implicit Presence Numeric Fields (proto3)&lt;/h3>
&lt;p>For these field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// no field label specified, defaults to implicit presence.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>int32 foo() const&lt;/code>: Returns the current value of the field. If the field is
not set, returns 0.&lt;/li>
&lt;li>&lt;code>void set_foo(int32 value)&lt;/code>: Sets the value of the field. After calling
this, &lt;code>foo()&lt;/code> will return &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Clears the value of the field. After calling this,
&lt;code>foo()&lt;/code> will return 0.&lt;/li>
&lt;/ul>
&lt;p>For other numeric field types (including &lt;code>bool&lt;/code>), &lt;code>int32&lt;/code> is replaced with the
corresponding C++ type according to the
&lt;a href="https://protobuf.dev/programming-guides/proto3/#scalar">scalar value types table&lt;/a>.&lt;/p>
&lt;h3 id="string">Optional String/Bytes Fields (proto2 and proto3)&lt;/h3>
&lt;p>For any of these field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool has_foo() const&lt;/code>: Returns &lt;code>true&lt;/code> if the field is set.&lt;/li>
&lt;li>&lt;code>const string&amp;amp; foo() const&lt;/code>: Returns the current value of the field. If the
field is not set, returns the default value.&lt;/li>
&lt;li>&lt;code>void set_foo(const string&amp;amp; value)&lt;/code>: Sets the value of the field. After
calling this, &lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code> and &lt;code>foo()&lt;/code> will return a copy
of &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void set_foo(string&amp;amp;&amp;amp; value)&lt;/code> (C++11 and beyond): Sets the value of the
field, moving from the passed string. After calling this, &lt;code>has_foo()&lt;/code> will
return &lt;code>true&lt;/code> and &lt;code>foo()&lt;/code> will return a copy of &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void set_foo(const char* value)&lt;/code>: Sets the value of the field using a
C-style null-terminated string. After calling this, &lt;code>has_foo()&lt;/code> will return
&lt;code>true&lt;/code> and &lt;code>foo()&lt;/code> will return a copy of &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void set_foo(const char* value, int size)&lt;/code>: Like above, but the string size
is given explicitly rather than determined by looking for a null-terminator
byte.&lt;/li>
&lt;li>&lt;code>string* mutable_foo()&lt;/code>: Returns a pointer to the mutable &lt;code>string&lt;/code> object
that stores the field&amp;rsquo;s value. If the field was not set prior to the call,
then the returned string will be empty (&lt;em>not&lt;/em> the default value). After
calling this, &lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code> and &lt;code>foo()&lt;/code> will return
whatever value is written into the given string.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Clears the value of the field. After calling this,
&lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code> and &lt;code>foo()&lt;/code> will return the default value.&lt;/li>
&lt;li>&lt;code>void set_allocated_foo(string* value)&lt;/code>:
Sets the &lt;code>string&lt;/code>
object to the field and frees the previous field value if it exists. If the
&lt;code>string&lt;/code> pointer is not &lt;code>NULL&lt;/code>, the message takes ownership of the allocated
&lt;code>string&lt;/code> object and &lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code>. The message is free to
delete the allocated &lt;code>string&lt;/code> object at any time, so references to the
object may be invalidated. Otherwise, if the &lt;code>value&lt;/code> is &lt;code>NULL&lt;/code>, the behavior
is the same as calling &lt;code>clear_foo()&lt;/code>.&lt;/li>
&lt;li>&lt;code>string* release_foo()&lt;/code>:
Releases the
ownership of the field and returns the pointer of the &lt;code>string&lt;/code> object. After
calling this, caller takes the ownership of the allocated &lt;code>string&lt;/code> object,
&lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code>, and &lt;code>foo()&lt;/code> will return the default value.&lt;/li>
&lt;/ul>
&lt;p>&lt;a id="proto3_string">&lt;/a>&lt;/p>
&lt;h3 id="implicit-string">Implicit Presence String/Bytes Fields (proto3)&lt;/h3>
&lt;p>For any of these field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// no field label specified, defaults to implicit presence.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>const string&amp;amp; foo() const&lt;/code>: Returns the current value of the field. If the
field is not set, returns the empty string/empty bytes.&lt;/li>
&lt;li>&lt;code>void set_foo(const string&amp;amp; value)&lt;/code>: Sets the value of the field. After
calling this, &lt;code>foo()&lt;/code> will return a copy of &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void set_foo(string&amp;amp;&amp;amp; value)&lt;/code> (C++11 and beyond): Sets the value of the
field, moving from the passed string. After calling this, &lt;code>foo()&lt;/code> will
return a copy of &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void set_foo(const char* value)&lt;/code>: Sets the value of the field using a
C-style null-terminated string. After calling this, &lt;code>foo()&lt;/code> will return a
copy of &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void set_foo(const char* value, int size)&lt;/code>: Like above, but the string size
is given explicitly rather than determined by looking for a null-terminator
byte.&lt;/li>
&lt;li>&lt;code>string* mutable_foo()&lt;/code>: Returns a pointer to the mutable &lt;code>string&lt;/code> object
that stores the field&amp;rsquo;s value. If the field was not set prior to the call,
then the returned string will be empty. After calling this, &lt;code>foo()&lt;/code> will
return whatever value is written into the given string.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Clears the value of the field. After calling this,
&lt;code>foo()&lt;/code> will return the empty string/empty bytes.&lt;/li>
&lt;li>&lt;code>void set_allocated_foo(string* value)&lt;/code>:
Sets the &lt;code>string&lt;/code>
object to the field and frees the previous field value if it exists. If the
&lt;code>string&lt;/code> pointer is not &lt;code>NULL&lt;/code>, the message takes ownership of the allocated
&lt;code>string&lt;/code> object. The message is free to delete the allocated &lt;code>string&lt;/code> object
at any time, so references to the object may be invalidated. Otherwise, if
the &lt;code>value&lt;/code> is &lt;code>NULL&lt;/code>, the behavior is the same as calling &lt;code>clear_foo()&lt;/code>.&lt;/li>
&lt;li>&lt;code>string* release_foo()&lt;/code>:
Releases the
ownership of the field and returns the pointer of the &lt;code>string&lt;/code> object. After
calling this, caller takes the ownership of the allocated &lt;code>string&lt;/code> object
and &lt;code>foo()&lt;/code> will return the empty string/empty bytes.&lt;/li>
&lt;/ul>
&lt;h3 id="cord">Singular Bytes Fields with Cord Support&lt;/h3>
&lt;p>v23.0 added support for
&lt;a href="https://github.com/abseil/abseil-cpp/blob/master/absl/strings/cord.h">&lt;code>absl::Cord&lt;/code>&lt;/a>
for singular &lt;code>bytes&lt;/code> fields (including
&lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/#oneof-numeric">&lt;code>oneof&lt;/code> fields&lt;/a>). Singular &lt;code>string&lt;/code>, &lt;code>repeated string&lt;/code>, and &lt;code>repeated bytes&lt;/code> fields do not support using &lt;code>Cord&lt;/code>s.&lt;/p>
&lt;p>To set a singular &lt;code>bytes&lt;/code> field to store data using &lt;code>absl::Cord&lt;/code>, use the
following syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">25&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ctype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">CORD&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">26&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ctype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">CORD&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using &lt;code>cord&lt;/code> is not available for &lt;code>repeated bytes&lt;/code> fields. Protoc ignores
&lt;code>[ctype=CORD]&lt;/code> settings on those fields.&lt;/p>
&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>const ::absl::Cord&amp;amp; foo() const&lt;/code>: Returns the current value of the field.
If the field is not set, returns an empty &lt;code>Cord&lt;/code> (proto3) or the default
value (proto2).&lt;/li>
&lt;li>&lt;code>void set_foo(const ::absl::Cord&amp;amp; value)&lt;/code>: Sets the value of the field.
After calling this, &lt;code>foo()&lt;/code> will return &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void set_foo(::absl::string_view value)&lt;/code>: Sets the value of the field.
After calling this, &lt;code>foo()&lt;/code> will return &lt;code>value&lt;/code> as an &lt;code>absl::Cord&lt;/code>.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Clears the value of the field. After calling this,
&lt;code>foo()&lt;/code> will return an empty &lt;code>Cord&lt;/code> (proto3) or the default value (proto2).&lt;/li>
&lt;li>&lt;code>bool has_foo()&lt;/code>: Returns &lt;code>true&lt;/code> if the field is set.&lt;/li>
&lt;/ul>
&lt;h3 id="enum_field">Optional Enum Fields (proto2 and proto3)&lt;/h3>
&lt;p>Given the enum type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_VALUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_OTHER_VALUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For either of these field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool has_foo() const&lt;/code>: Returns &lt;code>true&lt;/code> if the field is set.&lt;/li>
&lt;li>&lt;code>Bar foo() const&lt;/code>: Returns the current value of the field. If the field is
not set, returns the default value.&lt;/li>
&lt;li>&lt;code>void set_foo(Bar value)&lt;/code>: Sets the value of the field. After calling this,
&lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code> and &lt;code>foo()&lt;/code> will return &lt;code>value&lt;/code>. In debug
mode (i.e. NDEBUG is not defined), if &lt;code>value&lt;/code> does not match any of the
values defined for &lt;code>Bar&lt;/code>, this method will abort the process.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Clears the value of the field. After calling this,
&lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code> and &lt;code>foo()&lt;/code> will return the default value.&lt;/li>
&lt;/ul>
&lt;h3 id="implicit-enum">Implicit Presence Enum Fields (proto3)&lt;/h3>
&lt;p>Given the enum type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_VALUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_OTHER_VALUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For these field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// no field label specified, defaults to implicit presence.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Bar foo() const&lt;/code>: Returns the current value of the field. If the field is
not set, returns the default value (0).&lt;/li>
&lt;li>&lt;code>void set_foo(Bar value)&lt;/code>: Sets the value of the field. After calling this,
&lt;code>foo()&lt;/code> will return &lt;code>value&lt;/code>.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Clears the value of the field. After calling this,
&lt;code>foo()&lt;/code> will return the default value.&lt;/li>
&lt;/ul>
&lt;h3 id="embeddedmessage">Optional Embedded Message Fields (proto2 and proto3)&lt;/h3>
&lt;p>Given the message type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For any of these field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">//proto2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//proto3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool has_foo() const&lt;/code>: Returns &lt;code>true&lt;/code> if the field is set.&lt;/li>
&lt;li>&lt;code>const Bar&amp;amp; foo() const&lt;/code>: Returns the current value of the field. If the
field is not set, returns a &lt;code>Bar&lt;/code> with none of its fields set (possibly
&lt;code>Bar::default_instance()&lt;/code>).&lt;/li>
&lt;li>&lt;code>Bar* mutable_foo()&lt;/code>: Returns a pointer to the mutable &lt;code>Bar&lt;/code> object that
stores the field&amp;rsquo;s value. If the field was not set prior to the call, then
the returned &lt;code>Bar&lt;/code> will have none of its fields set (i.e. it will be
identical to a newly-allocated &lt;code>Bar&lt;/code>). After calling this, &lt;code>has_foo()&lt;/code> will
return &lt;code>true&lt;/code> and &lt;code>foo()&lt;/code> will return a reference to the same instance of
&lt;code>Bar&lt;/code>.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Clears the value of the field. After calling this,
&lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code> and &lt;code>foo()&lt;/code> will return the default value.&lt;/li>
&lt;li>&lt;code>void set_allocated_foo(Bar* bar)&lt;/code>: Sets the &lt;code>Bar&lt;/code> object to the field and
frees the previous field value if it exists. If the &lt;code>Bar&lt;/code> pointer is not
&lt;code>NULL&lt;/code>, the message takes ownership of the allocated &lt;code>Bar&lt;/code> object and
&lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code>. Otherwise, if the &lt;code>Bar&lt;/code> is &lt;code>NULL&lt;/code>, the
behavior is the same as calling &lt;code>clear_foo()&lt;/code>.&lt;/li>
&lt;li>&lt;code>Bar* release_foo()&lt;/code>: Releases the ownership of the field and returns the
pointer of the &lt;code>Bar&lt;/code> object. After calling this, caller takes the ownership
of the allocated &lt;code>Bar&lt;/code> object, &lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code>, and &lt;code>foo()&lt;/code>
will return the default value.&lt;/li>
&lt;/ul>
&lt;h3 id="repeatednumeric">Repeated Numeric Fields&lt;/h3>
&lt;p>For this field definition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>int foo_size() const&lt;/code>: Returns the number of elements currently in the
field. To check for an empty set, consider using the
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.repeated_field/#RepeatedPtrField">&lt;code>empty()&lt;/code>&lt;/a>
method in the underlying &lt;code>RepeatedField&lt;/code> instead of this method.&lt;/li>
&lt;li>&lt;code>int32 foo(int index) const&lt;/code>: Returns the element at the given zero-based
index. Calling this method with index outside of [0, foo_size()) yields
undefined behavior.&lt;/li>
&lt;li>&lt;code>void set_foo(int index, int32 value)&lt;/code>: Sets the value of the element at the
given zero-based index.&lt;/li>
&lt;li>&lt;code>void add_foo(int32 value)&lt;/code>: Appends a new element to the end of the field
with the given value.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Removes all elements from the field. After calling this,
&lt;code>foo_size()&lt;/code> will return zero.&lt;/li>
&lt;li>&lt;code>const RepeatedField&amp;lt;int32&amp;gt;&amp;amp; foo() const&lt;/code>: Returns the underlying
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.repeated_field/#RepeatedField">&lt;code>RepeatedField&lt;/code>&lt;/a>
that stores the field&amp;rsquo;s elements. This container class provides STL-like
iterators and other methods.&lt;/li>
&lt;li>&lt;code>RepeatedField&amp;lt;int32&amp;gt;* mutable_foo()&lt;/code>: Returns a pointer to the underlying
mutable &lt;code>RepeatedField&lt;/code> that stores the field&amp;rsquo;s elements. This container
class provides STL-like iterators and other methods.&lt;/li>
&lt;/ul>
&lt;p>For other numeric field types (including &lt;code>bool&lt;/code>), &lt;code>int32&lt;/code> is replaced with the
corresponding C++ type according to the
&lt;a href="https://protobuf.dev/programming-guides/proto2/#scalar">scalar value types table&lt;/a>.&lt;/p>
&lt;h3 id="repeatedstring">Repeated String Fields&lt;/h3>
&lt;p>For either of these field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>int foo_size() const&lt;/code>: Returns the number of elements currently in the
field. To check for an empty set, consider using the
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.repeated_field/#RepeatedPtrField">&lt;code>empty()&lt;/code>&lt;/a>
method in the underlying &lt;code>RepeatedField&lt;/code> instead of this method.&lt;/li>
&lt;li>&lt;code>const string&amp;amp; foo(int index) const&lt;/code>: Returns the element at the given
zero-based index. Calling this method with index outside of [0,
foo_size()-1] yields undefined behavior.&lt;/li>
&lt;li>&lt;code>void set_foo(int index, const string&amp;amp; value)&lt;/code>: Sets the value of the
element at the given zero-based index.&lt;/li>
&lt;li>&lt;code>void set_foo(int index, const char* value)&lt;/code>: Sets the value of the element
at the given zero-based index using a C-style null-terminated string.&lt;/li>
&lt;li>&lt;code>void set_foo(int index, const char* value, int size)&lt;/code>: Like above, but the
string size is given explicitly rather than determined by looking for a
null-terminator byte.&lt;/li>
&lt;li>&lt;code>string* mutable_foo(int index)&lt;/code>: Returns a pointer to the mutable &lt;code>string&lt;/code>
object that stores the value of the element at the given zero-based index.
Calling this method with index outside of [0, foo_size()) yields undefined
behavior.&lt;/li>
&lt;li>&lt;code>void add_foo(const string&amp;amp; value)&lt;/code>: Appends a new element to the end of the
field with the given value.&lt;/li>
&lt;li>&lt;code>void add_foo(const char* value)&lt;/code>: Appends a new element to the end of the
field using a C-style null-terminated string.&lt;/li>
&lt;li>&lt;code>void add_foo(const char* value, int size)&lt;/code>: Like above, but the string size
is given explicitly rather than determined by looking for a null-terminator
byte.&lt;/li>
&lt;li>&lt;code>string* add_foo()&lt;/code>: Adds a new empty string element to the end of the field
and returns a pointer to it.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Removes all elements from the field. After calling this,
&lt;code>foo_size()&lt;/code> will return zero.&lt;/li>
&lt;li>&lt;code>const RepeatedPtrField&amp;lt;string&amp;gt;&amp;amp; foo() const&lt;/code>: Returns the underlying
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.repeated_field/#RepeatedPtrField">&lt;code>RepeatedPtrField&lt;/code>&lt;/a>
that stores the field&amp;rsquo;s elements. This container class provides STL-like
iterators and other methods.&lt;/li>
&lt;li>&lt;code>RepeatedPtrField&amp;lt;string&amp;gt;* mutable_foo()&lt;/code>: Returns a pointer to the
underlying mutable &lt;code>RepeatedPtrField&lt;/code> that stores the field&amp;rsquo;s elements. This
container class provides STL-like iterators and other methods.&lt;/li>
&lt;/ul>
&lt;h3 id="repeated_enum">Repeated Enum Fields&lt;/h3>
&lt;p>Given the enum type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_VALUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_OTHER_VALUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For this field definition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>int foo_size() const&lt;/code>: Returns the number of elements currently in the
field. To check for an empty set, consider using the
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.repeated_field/#RepeatedPtrField">&lt;code>empty()&lt;/code>&lt;/a>
method in the underlying &lt;code>RepeatedField&lt;/code> instead of this method.&lt;/li>
&lt;li>&lt;code>Bar foo(int index) const&lt;/code>: Returns the element at the given zero-based
index. Calling this method with index outside of [0, foo_size()) yields
undefined behavior.&lt;/li>
&lt;li>&lt;code>void set_foo(int index, Bar value)&lt;/code>: Sets the value of the element at the
given zero-based index. In debug mode (i.e. NDEBUG is not defined), if
&lt;code>value&lt;/code> does not match any of the values defined for &lt;code>Bar&lt;/code>, this method will
abort the process.&lt;/li>
&lt;li>&lt;code>void add_foo(Bar value)&lt;/code>: Appends a new element to the end of the field
with the given value. In debug mode (i.e. NDEBUG is not defined), if &lt;code>value&lt;/code>
does not match any of the values defined for &lt;code>Bar&lt;/code>, this method will abort
the process.&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Removes all elements from the field. After calling this,
&lt;code>foo_size()&lt;/code> will return zero.&lt;/li>
&lt;li>&lt;code>const RepeatedField&amp;lt;int&amp;gt;&amp;amp; foo() const&lt;/code>: Returns the underlying
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.repeated_field/#RepeatedField">&lt;code>RepeatedField&lt;/code>&lt;/a>
that stores the field&amp;rsquo;s elements. This container class provides STL-like
iterators and other methods.&lt;/li>
&lt;li>&lt;code>RepeatedField&amp;lt;int&amp;gt;* mutable_foo()&lt;/code>: Returns a pointer to the underlying
mutable &lt;code>RepeatedField&lt;/code> that stores the field&amp;rsquo;s elements. This container
class provides STL-like iterators and other methods.&lt;/li>
&lt;/ul>
&lt;h3 id="repeatedmessage">Repeated Embedded Message Fields&lt;/h3>
&lt;p>Given the message type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For this field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>int foo_size() const&lt;/code>: Returns the number of elements currently in the
field. To check for an empty set, consider using the
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.repeated_field/#RepeatedPtrField">&lt;code>empty()&lt;/code>&lt;/a>
method in the underlying &lt;code>RepeatedField&lt;/code> instead of this method.&lt;/li>
&lt;li>&lt;code>const Bar&amp;amp; foo(int index) const&lt;/code>: Returns the element at the given
zero-based index. Calling this method with index outside of [0, foo_size())
yields undefined behavior.&lt;/li>
&lt;li>&lt;code>Bar* mutable_foo(int index)&lt;/code>: Returns a pointer to the mutable &lt;code>Bar&lt;/code> object
that stores the value of the element at the given zero-based index. Calling
this method with index outside of [0, foo_size()) yields undefined behavior.&lt;/li>
&lt;li>&lt;code>Bar* add_foo()&lt;/code>: Adds a new element to the end of the field and returns a
pointer to it. The returned &lt;code>Bar&lt;/code> is mutable and will have none of its
fields set (i.e. it will be identical to a newly-allocated &lt;code>Bar&lt;/code>).&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>: Removes all elements from the field. After calling this,
&lt;code>foo_size()&lt;/code> will return zero.&lt;/li>
&lt;li>&lt;code>const RepeatedPtrField&amp;lt;Bar&amp;gt;&amp;amp; foo() const&lt;/code>: Returns the underlying
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.repeated_field/#RepeatedPtrField">&lt;code>RepeatedPtrField&lt;/code>&lt;/a>
that stores the field&amp;rsquo;s elements. This container class provides STL-like
iterators and other methods.&lt;/li>
&lt;li>&lt;code>RepeatedPtrField&amp;lt;Bar&amp;gt;* mutable_foo()&lt;/code>: Returns a pointer to the underlying
mutable &lt;code>RepeatedPtrField&lt;/code> that stores the field&amp;rsquo;s elements. This container
class provides STL-like iterators and other methods.&lt;/li>
&lt;/ul>
&lt;h3 id="oneof-numeric">Oneof Numeric Fields&lt;/h3>
&lt;p>For this &lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/#oneof">oneof&lt;/a> field definition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">example_name&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool has_foo() const&lt;/code> (proto2 only): Returns &lt;code>true&lt;/code> if oneof case is
&lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>&lt;code>int32 foo() const&lt;/code>: Returns the current value of the field if oneof case is
&lt;code>kFoo&lt;/code>. Otherwise, returns the default value.&lt;/li>
&lt;li>&lt;code>void set_foo(int32 value)&lt;/code>:
&lt;ul>
&lt;li>If any other oneof field in the same oneof is set, calls
&lt;code>clear_example_name()&lt;/code>.&lt;/li>
&lt;li>Sets the value of this field and sets the oneof case to &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>&lt;code>has_foo()&lt;/code> (proto2 only) will return true, &lt;code>foo()&lt;/code> will return &lt;code>value&lt;/code>,
and &lt;code>example_name_case()&lt;/code> will return &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>:
&lt;ul>
&lt;li>Nothing will be changed if oneof case is not &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>If oneof case is &lt;code>kFoo&lt;/code>, clears the value of the field and oneof case.
&lt;code>has_foo()&lt;/code> (proto2 only) will return &lt;code>false&lt;/code>, &lt;code>foo()&lt;/code> will return the
default value and &lt;code>example_name_case()&lt;/code> will return
&lt;code>EXAMPLE_NAME_NOT_SET&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>For other numeric field types (including &lt;code>bool&lt;/code>),&lt;code>int32&lt;/code> is replaced with the
corresponding C++ type according to the
&lt;a href="https://protobuf.dev/programming-guides/proto3/#scalar">scalar value types table&lt;/a>.&lt;/p>
&lt;h3 id="oneof-string">Oneof String Fields&lt;/h3>
&lt;p>For any of these &lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/#oneof">oneof&lt;/a> field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">example_name&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">example_name&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool has_foo() const&lt;/code>: Returns &lt;code>true&lt;/code> if the oneof case is &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>&lt;code>const string&amp;amp; foo() const&lt;/code>: Returns the current value of the field if the
oneof case is &lt;code>kFoo&lt;/code>. Otherwise, returns the default value.&lt;/li>
&lt;li>&lt;code>void set_foo(const string&amp;amp; value)&lt;/code>:
&lt;ul>
&lt;li>If any other oneof field in the same oneof is set, calls
&lt;code>clear_example_name()&lt;/code>.&lt;/li>
&lt;li>Sets the value of this field and sets the oneof case to &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>&lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code>, &lt;code>foo()&lt;/code> will return a copy of &lt;code>value&lt;/code>
and &lt;code>example_name_case()&lt;/code> will return &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>void set_foo(const char* value)&lt;/code>:
&lt;ul>
&lt;li>If any other oneof field in the same oneof is set, calls
&lt;code>clear_example_name()&lt;/code>.&lt;/li>
&lt;li>Sets the value of the field using a C-style null-terminated string and
set the oneof case to &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>&lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code>, &lt;code>foo()&lt;/code> will return a copy of &lt;code>value&lt;/code>
and &lt;code>example_name_case()&lt;/code> will return &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>void set_foo(const char* value, int size)&lt;/code>: Like above, but the string size
is given explicitly rather than determined by looking for a null-terminator
byte.&lt;/li>
&lt;li>&lt;code>string* mutable_foo()&lt;/code>:
&lt;ul>
&lt;li>If any other oneof field in the same oneof is set, calls
&lt;code>clear_example_name()&lt;/code>.&lt;/li>
&lt;li>Sets the oneof case to &lt;code>kFoo&lt;/code> and returns a pointer to the mutable
string object that stores the field&amp;rsquo;s value. If the oneof case was not
&lt;code>kFoo&lt;/code> prior to the call, then the returned string will be empty (not
the default value).&lt;/li>
&lt;li>&lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code>, &lt;code>foo()&lt;/code> will return whatever value is
written into the given string and &lt;code>example_name_case()&lt;/code> will return
&lt;code>kFoo&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>:
&lt;ul>
&lt;li>If the oneof case is not &lt;code>kFoo&lt;/code>, nothing will be changed .&lt;/li>
&lt;li>If the oneof case is &lt;code>kFoo&lt;/code>, frees the field and clears the oneof case .
&lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code>, &lt;code>foo()&lt;/code> will return the default value,
and &lt;code>example_name_case()&lt;/code> will return &lt;code>EXAMPLE_NAME_NOT_SET&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>void set_allocated_foo(string* value)&lt;/code>:
&lt;ul>
&lt;li>Calls &lt;code>clear_example_name()&lt;/code>.&lt;/li>
&lt;li>If the string pointer is not &lt;code>NULL&lt;/code>: Sets the string object to the field
and sets the oneof case to &lt;code>kFoo&lt;/code>. The message takes ownership of the
allocated string object, &lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code> and
&lt;code>example_name_case()&lt;/code> will return &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>If the string pointer is &lt;code>NULL&lt;/code>, &lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code> and
&lt;code>example_name_case()&lt;/code> will return &lt;code>EXAMPLE_NAME_NOT_SET&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>string* release_foo()&lt;/code>:
&lt;ul>
&lt;li>Returns &lt;code>NULL&lt;/code> if oneof case is not &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>Clears the oneof case, releases the ownership of the field and returns
the pointer of the string object. After calling this, caller takes the
ownership of the allocated string object, &lt;code>has_foo()&lt;/code> will return false,
&lt;code>foo()&lt;/code> will return the default value, and &lt;code>example_name_case()&lt;/code> will
return &lt;code>EXAMPLE_NAME_NOT_SET&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="oneof-enum">Oneof Enum Fields&lt;/h3>
&lt;p>Given the enum type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_VALUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR_OTHER_VALUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the &lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/#oneof">oneof&lt;/a> field definition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">example_name&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool has_foo() const&lt;/code> (proto2 only): Returns &lt;code>true&lt;/code> if oneof case is
&lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>&lt;code>Bar foo() const&lt;/code>: Returns the current value of the field if oneof case is
&lt;code>kFoo&lt;/code>. Otherwise, returns the default value.&lt;/li>
&lt;li>&lt;code>void set_foo(Bar value)&lt;/code>:
&lt;ul>
&lt;li>If any other oneof field in the same oneof is set, calls
&lt;code>clear_example_name()&lt;/code>.&lt;/li>
&lt;li>Sets the value of this field and sets the oneof case to &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>&lt;code>has_foo()&lt;/code> (proto2 only) will return &lt;code>true&lt;/code>, &lt;code>foo()&lt;/code> will return
&lt;code>value&lt;/code> and &lt;code>example_name_case()&lt;/code> will return &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>In debug mode (i.e. NDEBUG is not defined), if &lt;code>value&lt;/code> does not match
any of the values defined for &lt;code>Bar&lt;/code>, this method will abort the process.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>:
&lt;ul>
&lt;li>Nothing will be changed if the oneof case is not &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>If the oneof case is &lt;code>kFoo&lt;/code>, clears the value of the field and the oneof
case. &lt;code>has_foo()&lt;/code> (proto2 only) will return &lt;code>false&lt;/code>, &lt;code>foo()&lt;/code> will return
the default value and &lt;code>example_name_case()&lt;/code> will return
&lt;code>EXAMPLE_NAME_NOT_SET&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="oneof-embedded">Oneof Embedded Message Fields&lt;/h3>
&lt;p>Given the message type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the &lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/#oneof">oneof&lt;/a> field definition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">example_name&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool has_foo() const&lt;/code>: Returns true if oneof case is &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>&lt;code>const Bar&amp;amp; foo() const&lt;/code>: Returns the current value of the field if oneof
case is &lt;code>kFoo&lt;/code>. Otherwise, returns a Bar with none of its fields set
(possibly &lt;code>Bar::default_instance()&lt;/code>).&lt;/li>
&lt;li>&lt;code>Bar* mutable_foo()&lt;/code>:
&lt;ul>
&lt;li>If any other oneof field in the same oneof is set, calls
&lt;code>clear_example_name()&lt;/code>.&lt;/li>
&lt;li>Sets the oneof case to &lt;code>kFoo&lt;/code> and returns a pointer to the mutable Bar
object that stores the field&amp;rsquo;s value. If the oneof case was not &lt;code>kFoo&lt;/code>
prior to the call, then the returned Bar will have none of its fields
set (i.e. it will be identical to a newly-allocated Bar).&lt;/li>
&lt;li>After calling this, &lt;code>has_foo()&lt;/code> will return &lt;code>true&lt;/code>, &lt;code>foo()&lt;/code> will return
a reference to the same instance of &lt;code>Bar&lt;/code> and &lt;code>example_name_case()&lt;/code> will
return &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>void clear_foo()&lt;/code>:
&lt;ul>
&lt;li>Nothing will be changed if the oneof case is not &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>If the oneof case equals &lt;code>kFoo&lt;/code>, frees the field and clears the oneof
case. &lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code>, &lt;code>foo()&lt;/code> will return the default
value and &lt;code>example_name_case()&lt;/code> will return &lt;code>EXAMPLE_NAME_NOT_SET&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>void set_allocated_foo(Bar* bar)&lt;/code>:
&lt;ul>
&lt;li>Calls &lt;code>clear_example_name()&lt;/code>.&lt;/li>
&lt;li>If the &lt;code>Bar&lt;/code> pointer is not &lt;code>NULL&lt;/code>: Sets the &lt;code>Bar&lt;/code> object to the field
and sets the oneof case to &lt;code>kFoo&lt;/code>. The message takes ownership of the
allocated &lt;code>Bar&lt;/code> object, has_foo() will return true and
&lt;code>example_name_case()&lt;/code> will return &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>If the pointer is &lt;code>NULL&lt;/code>, &lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code> and
&lt;code>example_name_case()&lt;/code> will return &lt;code>EXAMPLE_NAME_NOT_SET&lt;/code>. (The behavior
is like calling &lt;code>clear_example_name()&lt;/code>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Bar* release_foo()&lt;/code>:
&lt;ul>
&lt;li>Returns &lt;code>NULL&lt;/code> if oneof case is not &lt;code>kFoo&lt;/code>.&lt;/li>
&lt;li>If the oneof case is &lt;code>kFoo&lt;/code>, clears the oneof case, releases the
ownership of the field and returns the pointer of the &lt;code>Bar&lt;/code> object.
After calling this, caller takes the ownership of the allocated &lt;code>Bar&lt;/code>
object, &lt;code>has_foo()&lt;/code> will return &lt;code>false&lt;/code>, &lt;code>foo()&lt;/code> will return the default
value and &lt;code>example_name_case()&lt;/code> will return &lt;code>EXAMPLE_NAME_NOT_SET&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="map">Map Fields&lt;/h3>
&lt;p>For this map field definition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">weight&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following accessor methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>const google::protobuf::Map&amp;lt;int32, int32&amp;gt;&amp;amp; weight();&lt;/code>: Returns an immutable
&lt;code>Map&lt;/code>.&lt;/li>
&lt;li>&lt;code>google::protobuf::Map&amp;lt;int32, int32&amp;gt;* mutable_weight();&lt;/code>: Returns a mutable
&lt;code>Map&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>A
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.map/">&lt;code>google::protobuf::Map&lt;/code>&lt;/a>
is a special container type used in protocol buffers to store map fields. As you
can see from its interface below, it uses a commonly-used subset of &lt;code>std::map&lt;/code>
and &lt;code>std::unordered_map&lt;/code> methods.&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong> These maps are unordered.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">typename&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">typename&lt;/span> &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Map&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Member types
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">typedef&lt;/span> &lt;span style="color:#000">Key&lt;/span> &lt;span style="color:#000">key_type&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">typedef&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#000">mapped_type&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">typedef&lt;/span> &lt;span style="color:#000">MapPair&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">value_type&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Iterators
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">iterator&lt;/span> &lt;span style="color:#000">begin&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">const_iterator&lt;/span> &lt;span style="color:#000">begin&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">const_iterator&lt;/span> &lt;span style="color:#000">cbegin&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">iterator&lt;/span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">const_iterator&lt;/span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">const_iterator&lt;/span> &lt;span style="color:#000">cend&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Capacity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">empty&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Element access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">operator&lt;/span>&lt;span style="color:#000;font-weight:bold">[](&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">at&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">at&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Lookup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">contains&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">count&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">const_iterator&lt;/span> &lt;span style="color:#000">find&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">iterator&lt;/span> &lt;span style="color:#000">find&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Modifiers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">pair&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">iterator&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">insert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">value_type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">InputIt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">insert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">InputIt&lt;/span> &lt;span style="color:#000">first&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">InputIt&lt;/span> &lt;span style="color:#000">last&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size_type&lt;/span> &lt;span style="color:#000">erase&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">iterator&lt;/span> &lt;span style="color:#000">erase&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">const_iterator&lt;/span> &lt;span style="color:#000">pos&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">iterator&lt;/span> &lt;span style="color:#000">erase&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">const_iterator&lt;/span> &lt;span style="color:#000">first&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">const_iterator&lt;/span> &lt;span style="color:#000">last&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">clear&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Copy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">other&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">operator&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">other&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The easiest way to add data is to use normal map syntax, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">unique_ptr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ProtoName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">my_enclosing_proto&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ProtoName&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">my_enclosing_proto&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">mutable_weight&lt;/span>&lt;span style="color:#000;font-weight:bold">())[&lt;/span>&lt;span style="color:#000">my_key&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">my_value&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pair&amp;lt;iterator, bool&amp;gt; insert(const value_type&amp;amp; value)&lt;/code> will implicitly cause a
deep copy of the &lt;code>value_type&lt;/code> instance. The most efficient way to insert a new
value into a &lt;code>google::protobuf::Map&lt;/code> is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">operator&lt;/span>&lt;span style="color:#000;font-weight:bold">[](&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">new_key&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">new_mapped&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="protobuf-map">Using &lt;code>google::protobuf::Map&lt;/code> with standard maps&lt;/h4>
&lt;p>&lt;code>google::protobuf::Map&lt;/code> supports the same iterator API as &lt;code>std::map&lt;/code> and
&lt;code>std::unordered_map&lt;/code>. If you don&amp;rsquo;t want to use &lt;code>google::protobuf::Map&lt;/code> directly,
you can convert a &lt;code>google::protobuf::Map&lt;/code> to a standard map by doing the
following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">std&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">int32&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">standard_map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">weight&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">begin&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">weight&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that this will make a deep copy of the entire map.&lt;/p>
&lt;p>You can also construct a &lt;code>google::protobuf::Map&lt;/code> from a standard map as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">int32&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">weight&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">standard_map&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">begin&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">standard_map&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="parsing-unknown">Parsing unknown values&lt;/h4>
&lt;p>On the wire, a .proto map is equivalent to a map entry message for each
key/value pair, while the map itself is a repeated field of map entries. Like
ordinary message types, it&amp;rsquo;s possible for a parsed map entry message to have
unknown fields: for example a field of type &lt;code>int64&lt;/code> in a map defined as
&lt;code>map&amp;lt;int32, string&amp;gt;&lt;/code>.&lt;/p>
&lt;p>If there are unknown fields in the wire format of a map entry message, they will
be discarded.&lt;/p>
&lt;p>If there is an unknown enum value in the wire format of a map entry message,
it&amp;rsquo;s handled differently in proto2 and proto3. In proto2, the whole map entry
message is put into the unknown field set of the containing message. In proto3,
it is put into a map field as if it is a known enum value.&lt;/p>
&lt;h2 id="any">Any&lt;/h2>
&lt;p>Given an &lt;a href="https://protobuf.dev/programming-guides/proto3/#any">&lt;code>Any&lt;/code>&lt;/a> field
like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;google/protobuf/any.proto&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">ErrorStatus&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">google.protobuf.Any&lt;/span> &lt;span style="color:#000">details&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In our generated code, the getter for the &lt;code>details&lt;/code> field returns an instance of
&lt;code>google::protobuf::Any&lt;/code>. This provides the following special methods to pack and
unpack the &lt;code>Any&lt;/code>&amp;rsquo;s values:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Any&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Packs the given message into this Any using the default type URL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// prefix “type.googleapis.com”. Returns false if serializing the message failed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">PackFrom&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Packs the given message into this Any using the given type URL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// prefix. Returns false if serializing the message failed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">PackFrom&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">string&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000">type_url_prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Unpacks this Any to a Message. Returns false if this Any
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// represents a different protobuf type or parsing fails.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">UnpackTo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Returns true if this Any represents the given protobuf type.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">template&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">typename&lt;/span> &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">Is&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="oneof">Oneof&lt;/h2>
&lt;p>Given a oneof definition like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">example_name&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo_int&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">foo_string&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The compiler will generate the following C++ enum type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">ExampleNameCase&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">kFooInt&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">kFooString&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">EXAMPLE_NAME_NOT_SET&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In addition, it will generate these methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ExampleNameCase example_name_case() const&lt;/code>: Returns the enum indicating
which field is set. Returns &lt;code>EXAMPLE_NAME_NOT_SET&lt;/code> if none of them is set.&lt;/li>
&lt;li>&lt;code>void clear_example_name()&lt;/code>: Frees the object if the oneof field set uses a
pointer (Message or String), and sets the oneof case to
&lt;code>EXAMPLE_NAME_NOT_SET&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="enum">Enumerations&lt;/h2>
&lt;p>Given an enum definition like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">VALUE_A&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">VALUE_B&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">VALUE_C&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1234&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The protocol buffer compiler will generate a C++ enum type called &lt;code>Foo&lt;/code> with the
same set of values. In addition, the compiler will generate the following
functions:&lt;/p>
&lt;ul>
&lt;li>&lt;code>const EnumDescriptor* Foo_descriptor()&lt;/code>: Returns the type&amp;rsquo;s descriptor,
which contains information about what values this enum type defines.&lt;/li>
&lt;li>&lt;code>bool Foo_IsValid(int value)&lt;/code>: Returns &lt;code>true&lt;/code> if the given numeric value
matches one of &lt;code>Foo&lt;/code>&amp;rsquo;s defined values. In the above example, it would return
&lt;code>true&lt;/code> if the input were 0, 5, or 1234.&lt;/li>
&lt;li>&lt;code>const string&amp;amp; Foo_Name(int value)&lt;/code>: Returns the name for given numeric
value. Returns an empty string if no such value exists. If multiple values
have this number, the first one defined is returned. In the above example,
&lt;code>Foo_Name(5)&lt;/code> would return &lt;code>&amp;quot;VALUE_B&amp;quot;&lt;/code>.&lt;/li>
&lt;li>&lt;code>bool Foo_Parse(const string&amp;amp; name, Foo* value)&lt;/code>: If &lt;code>name&lt;/code> is a valid value
name for this enum, assigns that value into &lt;code>value&lt;/code> and returns true.
Otherwise returns false. In the above example, &lt;code>Foo_Parse(&amp;quot;VALUE_C&amp;quot;, &amp;amp;some_foo)&lt;/code> would return true and set &lt;code>some_foo&lt;/code> to 1234.&lt;/li>
&lt;li>&lt;code>const Foo Foo_MIN&lt;/code>: the smallest valid value of the enum (VALUE_A in the
example).&lt;/li>
&lt;li>&lt;code>const Foo Foo_MAX&lt;/code>: the largest valid value of the enum (VALUE_C in the
example).&lt;/li>
&lt;li>&lt;code>const int Foo_ARRAYSIZE&lt;/code>: always defined as &lt;code>Foo_MAX + 1&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Be careful when casting integers to proto2 enums.&lt;/strong> If an integer is cast to a
proto2 enum value, the integer &lt;em>must&lt;/em> be one of the valid values for that enum,
or the results may be undefined. If in doubt, use the generated &lt;code>Foo_IsValid()&lt;/code>
function to test if the cast is valid. Setting an enum-typed field of a proto2
message to an invalid value may cause an assertion failure. If an invalid enum
value is read when parsing a proto2 message, it will be treated as an
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.unknown_field_set/">unknown field&lt;/a>.
These semantics have been changed in proto3. It&amp;rsquo;s safe to cast any integer to a
proto3 enum value as long as it fits into int32. Invalid enum values will also
be kept when parsing a proto3 message and returned by enum field accessors.&lt;/p>
&lt;p>&lt;strong>Be careful when using proto3 enums in switch statements.&lt;/strong> Proto3 enums are
open enum types with possible values outside the range of specified symbols.
Unrecognized enum values will be kept when parsing a proto3 message and returned
by the enum field accessors. A switch statement on a proto3 enum without a
default case will not be able to catch all cases even if all the known fields
are listed. This could lead to unexpected behavior including data corruption and
runtime crashes. &lt;strong>Always add a default case or explicitly call
&lt;code>Foo_IsValid(int)&lt;/code> outside of the switch to handle unknown enum values.&lt;/strong>&lt;/p>
&lt;p>You can define an enum inside a message type. In this case, the protocol buffer
compiler generates code that makes it appear that the enum type itself was
declared nested inside the message&amp;rsquo;s class. The &lt;code>Foo_descriptor()&lt;/code> and
&lt;code>Foo_IsValid()&lt;/code> functions are declared as static methods. In reality, the enum
type itself and its values are declared at the global scope with mangled names,
and are imported into the class&amp;rsquo;s scope with a typedef and a series of constant
definitions. This is done only to get around problems with declaration ordering.
Do not depend on the mangled top-level names; pretend the enum really is nested
in the message class.&lt;/p>
&lt;h2 id="extension">Extensions (proto2 only)&lt;/h2>
&lt;p>Given a message with an extension range:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extensions&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#204a87;font-weight:bold">to&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">199&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The protocol buffer compiler will generate some additional methods for &lt;code>Foo&lt;/code>:
&lt;code>HasExtension()&lt;/code>, &lt;code>ExtensionSize()&lt;/code>, &lt;code>ClearExtension()&lt;/code>, &lt;code>GetExtension()&lt;/code>,
&lt;code>SetExtension()&lt;/code>, &lt;code>MutableExtension()&lt;/code>, &lt;code>AddExtension()&lt;/code>,
&lt;code>SetAllocatedExtension()&lt;/code> and &lt;code>ReleaseExtension()&lt;/code>. Each of these methods takes,
as its first parameter, an extension identifier (described below), which
identifies an extension field. The remaining parameters and the return value are
exactly the same as those for the corresponding accessor methods that would be
generated for a normal (non-extension) field of the same type as the extension
identifier. (&lt;code>GetExtension()&lt;/code> corresponds to the accessors with no special
prefix.)&lt;/p>
&lt;p>Given an extension definition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">extend&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">123&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">repeated_bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">124&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">message_bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">125&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the singular extension field &lt;code>bar&lt;/code>, the protocol buffer compiler generates
an &amp;ldquo;extension identifier&amp;rdquo; called &lt;code>bar&lt;/code>, which you can use with &lt;code>Foo&lt;/code>&amp;rsquo;s extension
accessors to access this extension, like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">HasExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">HasExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ClearExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">HasExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the message extension field &lt;code>message_bar&lt;/code>, if the field is not set
&lt;code>foo.GetExtension(message_bar)&lt;/code> returns a &lt;code>Bar&lt;/code> with none of its fields set
(possibly &lt;code>Bar::default_instance()&lt;/code>).&lt;/p>
&lt;p>Similarly, for the repeated extension field &lt;code>repeated_bar&lt;/code>, the compiler
generates an extension identifier called &lt;code>repeated_bar&lt;/code>, which you can also use
with &lt;code>Foo&lt;/code>&amp;rsquo;s extension accessors:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">kSize&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">repeated_bar&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ExtensionSize&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">repeated_bar&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000">kSize&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">kSize&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">repeated_bar&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(The exact implementation of extension identifiers is complicated and involves
magical use of templates—however, you don&amp;rsquo;t need to worry about how extension
identifiers work to use them.)&lt;/p>
&lt;p>Extensions can be declared nested inside of another type. For example, a common
pattern is to do something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Baz&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extend&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">Baz&lt;/span> &lt;span style="color:#000">foo_ext&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">124&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, the extension identifier &lt;code>foo_ext&lt;/code> is declared nested inside
&lt;code>Baz&lt;/code>. It can be used as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Baz&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">baz&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">MutableExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Baz&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">foo_ext&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">FillInMyBaz&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">baz&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="arena">Arena Allocation&lt;/h2>
&lt;p>Arena allocation is a C++-only feature that helps you optimize your memory usage
and improve performance when working with protocol buffers. Enabling arena
allocation in your &lt;code>.proto&lt;/code> adds additional code for working with arenas to your
C++ generated code. You can find out more about the arena allocation API in the
&lt;a href="https://protobuf.dev/reference/cpp/arenas/">Arena Allocation Guide&lt;/a>.&lt;/p>
&lt;h2 id="service">Services&lt;/h2>
&lt;p>If the &lt;code>.proto&lt;/code> file contains the following line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">cc_generic_services&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>then the protocol buffer compiler will generate code based on the service
definitions found in the file as described in this section. However, the
generated code may be undesirable as it is not tied to any particular RPC
system, and thus requires more levels of indirection than code tailored to one
system. If you do NOT want this code to be generated, add this line to the file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">cc_generic_services&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If neither of the above lines are given, the option defaults to &lt;code>false&lt;/code>, as
generic services are deprecated. (Note that prior to 2.4.0, the option defaults
to &lt;code>true&lt;/code>)&lt;/p>
&lt;p>RPC systems based on &lt;code>.proto&lt;/code>-language service definitions should provide
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.compiler.plugin.pb/">plugins&lt;/a>
to generate code appropriate for the system. These plugins are likely to require
that abstract services are disabled, so that they can generate their own classes
of the same names.&lt;/p>
&lt;p>The remainder of this section describes what the protocol buffer compiler
generates when abstract services are enabled.&lt;/p>
&lt;h3 id="interface">Interface&lt;/h3>
&lt;p>Given a service definition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rpc&lt;/span> &lt;span style="color:#000">Bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">FooRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">returns&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">FooResponse&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The protocol buffer compiler will generate a class &lt;code>Foo&lt;/code> to represent this
service. &lt;code>Foo&lt;/code> will have a virtual method for each method defined in the service
definition. In this case, the method &lt;code>Bar&lt;/code> is defined as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">virtual&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">Bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">RpcController&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">controller&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">FooRequest&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">request&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">FooResponse&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Closure&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">done&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The parameters are equivalent to the parameters of &lt;code>Service::CallMethod()&lt;/code>,
except that the &lt;code>method&lt;/code> argument is implied and &lt;code>request&lt;/code> and &lt;code>response&lt;/code>
specify their exact type.&lt;/p>
&lt;p>These generated methods are virtual, but not pure-virtual. The default
implementations simply call &lt;code>controller-&amp;gt;SetFailed()&lt;/code> with an error message
indicating that the method is unimplemented, then invoke the &lt;code>done&lt;/code> callback.
When implementing your own service, you must subclass this generated service and
implement its methods as appropriate.&lt;/p>
&lt;p>&lt;code>Foo&lt;/code> subclasses the &lt;code>Service&lt;/code> interface. The protocol buffer compiler
automatically generates implementations of the methods of &lt;code>Service&lt;/code> as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;code>GetDescriptor&lt;/code>: Returns the service&amp;rsquo;s
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.descriptor/#ServiceDescriptor">&lt;code>ServiceDescriptor&lt;/code>&lt;/a>.&lt;/li>
&lt;li>&lt;code>CallMethod&lt;/code>: Determines which method is being called based on the provided
method descriptor and calls it directly, down-casting the request and
response messages objects to the correct types.&lt;/li>
&lt;li>&lt;code>GetRequestPrototype&lt;/code> and &lt;code>GetResponsePrototype&lt;/code>: Returns the default
instance of the request or response of the correct type for the given
method.&lt;/li>
&lt;/ul>
&lt;p>The following static method is also generated:&lt;/p>
&lt;ul>
&lt;li>&lt;code>static ServiceDescriptor descriptor()&lt;/code>: Returns the type&amp;rsquo;s descriptor,
which contains information about what methods this service has and what
their input and output types are.&lt;/li>
&lt;/ul>
&lt;h3 id="stub">Stub&lt;/h3>
&lt;p>The protocol buffer compiler also generates a &amp;ldquo;stub&amp;rdquo; implementation of every
service interface, which is used by clients wishing to send requests to servers
implementing the service. For the &lt;code>Foo&lt;/code> service (above), the stub implementation
&lt;code>Foo_Stub&lt;/code> will be defined. As with nested message types, a typedef is used so
that &lt;code>Foo_Stub&lt;/code> can also be referred to as &lt;code>Foo::Stub&lt;/code>.&lt;/p>
&lt;p>&lt;code>Foo_Stub&lt;/code> is a subclass of &lt;code>Foo&lt;/code> which also implements the following methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Foo_Stub(RpcChannel* channel)&lt;/code>: Constructs a new stub which sends requests
on the given channel.&lt;/li>
&lt;li>&lt;code>Foo_Stub(RpcChannel* channel, ChannelOwnership ownership)&lt;/code>: Constructs a
new stub which sends requests on the given channel and possibly owns that
channel. If &lt;code>ownership&lt;/code> is &lt;code>Service::STUB_OWNS_CHANNEL&lt;/code> then when the stub
object is deleted it will delete the channel as well.&lt;/li>
&lt;li>&lt;code>RpcChannel* channel()&lt;/code>: Returns this stub&amp;rsquo;s channel, as passed to the
constructor.&lt;/li>
&lt;/ul>
&lt;p>The stub additionally implements each of the service&amp;rsquo;s methods as a wrapper
around the channel. Calling one of the methods simply calls
&lt;code>channel-&amp;gt;CallMethod()&lt;/code>.&lt;/p>
&lt;p>The Protocol Buffer library does not include an RPC implementation. However, it
includes all of the tools you need to hook up a generated service class to any
arbitrary RPC implementation of your choice. You need only provide
implementations of
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.service/#RpcChannel">&lt;code>RpcChannel&lt;/code>&lt;/a>
and
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.service/#RpcController">&lt;code>RpcController&lt;/code>&lt;/a>.
See the documentation for
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.service/">&lt;code>service.h&lt;/code>&lt;/a>
for more information.&lt;/p>
&lt;h2 id="plugins">Plugin Insertion Points&lt;/h2>
&lt;p>&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.compiler.plugin.pb/">Code generator plugins&lt;/a>
which want to extend the output of the C++ code generator may insert code of the
following types using the given insertion point names. Each insertion point
appears in both the &lt;code>.pb.cc&lt;/code> file and the &lt;code>.pb.h&lt;/code> file unless otherwise noted.&lt;/p>
&lt;ul>
&lt;li>&lt;code>includes&lt;/code>: Include directives.&lt;/li>
&lt;li>&lt;code>namespace_scope&lt;/code>: Declarations that belong in the file&amp;rsquo;s package/namespace,
but not within any particular class. Appears after all other namespace-scope
code.&lt;/li>
&lt;li>&lt;code>global_scope&lt;/code>: Declarations that belong at the top level, outside of the
file&amp;rsquo;s namespace. Appears at the very end of the file.&lt;/li>
&lt;li>&lt;code>class_scope:TYPENAME&lt;/code>: Member declarations that belong in a message class.
&lt;code>TYPENAME&lt;/code> is the full proto name, e.g. &lt;code>package.MessageType&lt;/code>. Appears after
all other public declarations in the class. This insertion point appears
only in the &lt;code>.pb.h&lt;/code> file.&lt;/li>
&lt;/ul>
&lt;p>Do not generate code which relies on private class members declared by the
standard code generator, as these implementation details may change in future
versions of Protocol Buffers.&lt;/p></description></item><item><title>Reference: C++ Arena Allocation Guide</title><link>https://protobuf.dev/reference/cpp/arenas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/reference/cpp/arenas/</guid><description>
&lt;p>This page describes exactly what C++ code the protocol
buffer compiler generates in addition to the code described in the
&lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/">C++ Generated Code Guide&lt;/a>
when arena allocation is enabled. It assumes that you are familiar with the
material in the
&lt;a href="https://protobuf.dev/programming-guides/proto">language guide&lt;/a> and the
&lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/">C++ Generated Code Guide&lt;/a>.&lt;/p>
&lt;h2 id="why">Why Use Arena Allocation?&lt;/h2>
&lt;p>Memory allocation and deallocation constitutes a significant fraction of CPU
time spent in protocol buffers code. By default, protocol buffers performs heap
allocations for each message object, each of its subobjects, and several field
types, such as strings. These allocations occur in bulk when parsing a message
and when building new messages in memory, and associated deallocations happen
when messages and their subobject trees are freed.&lt;/p>
&lt;p>Arena-based allocation has been designed to reduce this performance cost. With
arena allocation, new objects are allocated out of a large piece of preallocated
memory called the arena. Objects can all be freed at once by discarding the
entire arena, ideally without running destructors of any contained object
(though an arena can still maintain a &amp;ldquo;destructor list&amp;rdquo; when required). This
makes object allocation faster by reducing it to a simple pointer increment, and
makes deallocation almost free. Arena allocation also provides greater cache
efficiency: when messages are parsed, they are more likely to be allocated in
continuous memory, which makes traversing messages more likely to hit hot cache
lines.&lt;/p>
&lt;p>To get these benefits you&amp;rsquo;ll need to be aware of object lifetimes and find a
suitable granularity at which to use arenas (for servers, this is often
per-request). You can find out more about how to get the most from arena
allocation in &lt;a href="https://protobuf.dev/reference/cpp/arenas/#usage">Usage patterns and best practices&lt;/a>.&lt;/p>
&lt;p>This table summarizes the typical performance advantages and disadvantages of
using arenas:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Operation&lt;/th>
&lt;th style="text-align:left">Heap-allocated proto messages&lt;/th>
&lt;th style="text-align:left">Arena-allocated proto messages&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;em>Message allocation&lt;/em>&lt;/td>
&lt;td style="text-align:left">Slower on average&lt;/td>
&lt;td style="text-align:left">Faster on average&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;em>Message destruction&lt;/em>&lt;/td>
&lt;td style="text-align:left">Slower on average&lt;/td>
&lt;td style="text-align:left">Faster on average&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;em>Message moves&lt;/em>&lt;/td>
&lt;td style="text-align:left">Always a move (equivalent to a &lt;a href="https://en.wikipedia.org/wiki/Object_copying#Shallow_copy">shallow copy&lt;/a> in cost)&lt;/td>
&lt;td style="text-align:left">Sometimes a &lt;a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy">deep copy&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="gettingstarted">Getting Started&lt;/h2>
&lt;p>The protocol buffer compiler generates code for arena allocation for the
messages in your file, as used in the following example.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;google/protobuf/arena.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MyMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">CreateMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">MyMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The message object created by &lt;code>CreateMessage()&lt;/code> exists for as long as &lt;code>arena&lt;/code>
exists, and you should not &lt;code>delete&lt;/code> the returned message pointer. All of the
message object&amp;rsquo;s internal storage (with a few exceptions&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>) and submessages
(for example, submessages in a repeated field within &lt;code>MyMessage&lt;/code>) are allocated
on the arena as well.&lt;/p>
&lt;p>For the most part, the rest of your code will be the same as if you weren&amp;rsquo;t
using arena allocation.&lt;/p>
&lt;p>We&amp;rsquo;ll look at the arena API in more detail in the following sections, and you
can see a more extensive &lt;a href="https://protobuf.dev/reference/cpp/arenas/#example">example&lt;/a> at the end of the document.&lt;/p>
&lt;h2 id="arenaclass">Arena Class API&lt;/h2>
&lt;p>You create message objects on the arena using the
&lt;a href="https://protobuf.dev/reference/cpp/api-docs/google.protobuf.arena/">&lt;code>google::protobuf::Arena&lt;/code>&lt;/a>
class. This class implements the following public methods.&lt;/p>
&lt;h3 id="constructors">Constructors&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Arena()&lt;/code>: Creates a new arena with default parameters, tuned for average
use cases.&lt;/li>
&lt;li>&lt;code>Arena(const ArenaOptions&amp;amp; options)&lt;/code>: Creates a new arena that uses the
specified allocation options. The options available in &lt;code>ArenaOptions&lt;/code>
include the ability to use an initial block of user-provided memory for
allocations before resorting to the system allocator, control over the
initial and maximum request sizes for blocks of memory, and allowing you to
pass in custom block allocation and deallocation function pointers to build
freelists and others on top of the blocks.&lt;/li>
&lt;/ul>
&lt;h3 id="allocation">Allocation Methods&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>template&amp;lt;typename T&amp;gt; static T* CreateMessage(Arena* arena)&lt;/code>: Creates a new
protocol buffer object of message type &lt;code>T&lt;/code> on the arena.&lt;/p>
&lt;p>If &lt;code>arena&lt;/code> is not NULL, the returned message object is allocated on the
arena, its internal storage and submessages (if any) will be allocated on
the same arena, and its lifetime is the same as that of the arena. The
object must not be deleted/freed manually: the arena owns the message object
for lifetime purposes.&lt;/p>
&lt;p>If &lt;code>arena&lt;/code> is NULL, the returned message object is allocated on the heap,
and the caller owns the object upon return.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>template&amp;lt;typename T&amp;gt; static T* Create(Arena* arena, args...)&lt;/code>: Similar to
&lt;code>CreateMessage()&lt;/code> but lets you create an object of any class on the arena,
not just protocol buffer message types. For example, let&amp;rsquo;s say you have this
C++ class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">MyCustomClass&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MyCustomClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">arg1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">arg2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;you can create an instance of it on the arena like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MyCustomClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">MyCustomClass&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">constructor_arg1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">constructor_arg2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>template&amp;lt;typename T&amp;gt; static T* CreateArray(Arena* arena, size_t n)&lt;/code>: If
&lt;code>arena&lt;/code> is not NULL, this method allocates raw storage for &lt;code>n&lt;/code> elements of
type &lt;code>T&lt;/code> and returns it. The arena owns the returned memory and will free it
on its own destruction. If &lt;code>arena&lt;/code> is NULL, this method allocates storage on
the heap and the caller receives ownership.&lt;/p>
&lt;p>&lt;code>T&lt;/code> must have a trivial constructor: constructors are not called when the
array is created on the arena.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="owned-list">&amp;ldquo;Owned list&amp;rdquo; Methods&lt;/h3>
&lt;p>The following methods let you specify that particular objects or destructors are
&amp;ldquo;owned&amp;rdquo; by the arena, ensuring that they are deleted or called when the arena
itself is deleted&lt;/p>
&lt;ul>
&lt;li>&lt;code>template&amp;lt;typename T&amp;gt; void Own(T* object)&lt;/code>: Adds &lt;code>object&lt;/code> to the arena&amp;rsquo;s
list of owned heap objects. When the arena is destroyed, it traverses this
list and frees each object using operator delete, i.e., the system memory
allocator. This method is useful in cases when an object&amp;rsquo;s lifetime should
be tied to the arena but, for whatever reason, the object itself cannot be
or was not already allocated on the arena.&lt;/li>
&lt;li>&lt;code>template&amp;lt;typename T&amp;gt; void OwnDestructor(T* object)&lt;/code>: Adds the destructor of
&lt;code>object&lt;/code> to the arena&amp;rsquo;s list of destructors to call. When the arena is
destroyed, it traverses this list and calls each destructor in turn. It does
not attempt to free the underlying memory of object. This method is useful
when an object is embedded in arena-allocated storage but its destructor
will not otherwise be called, for example because its containing class is a
protobuf message whose destructor won&amp;rsquo;t be called, or because it was
manually constructed in a block allocated by &lt;code>AllocateArray()&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="other-methods">Other Methods&lt;/h3>
&lt;ul>
&lt;li>&lt;code>uint64 SpaceUsed() const&lt;/code>: Returns the total size of the arena, which is
the sum of the sizes of the underlying blocks. This method is thread-safe;
however, if there are concurrent allocations from multiple threads this
method&amp;rsquo;s return value may not include the sizes of those new blocks.&lt;/li>
&lt;li>&lt;code>uint64 Reset()&lt;/code>: Destroys the arena&amp;rsquo;s storage, first calling all registered
destructors and freeing all registered heap objects and then discarding all
arena blocks. This teardown procedure is equivalent to that which occurs
when the arena&amp;rsquo;s destructor runs, except the arena is reusable for new
allocations after this method returns. Returns the total size used by the
arena: this information is useful for tuning performance.&lt;/li>
&lt;li>&lt;code>template&amp;lt;typename T&amp;gt; Arena* GetArena()&lt;/code>: Returns a pointer to this arena.
Not directly very useful but allows &lt;code>Arena&lt;/code> to be used in template
instantiations that expect &lt;code>GetArena()&lt;/code> methods to be present.&lt;/li>
&lt;/ul>
&lt;h3 id="thread-safety">Thread Safety&lt;/h3>
&lt;p>&lt;code>google::protobuf::Arena&lt;/code>&amp;rsquo;s allocation methods are thread-safe, and the
underlying implementation goes to some length to make multithreaded allocation
fast. The &lt;code>Reset()&lt;/code> method is &lt;em>not&lt;/em> thread-safe: the thread performing the arena
reset must synchronize with all threads performing allocations or using objects
allocated from that arena first.&lt;/p>
&lt;h2 id="messageclass">Generated Message Class&lt;/h2>
&lt;p>The following message class members are changed or added when you enable arena
allocation.&lt;/p>
&lt;h3 id="message-class-methods">Message Class Methods&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Message(Message&amp;amp;&amp;amp; other)&lt;/code>: If the source message is not on arena, the move
constructor efficiently &lt;em>moves&lt;/em> all fields from one message to another
without making copies or heap allocations (the time complexity of this
operation is &lt;code>O(number-of-declared-fields)&lt;/code>). However, if the source message
is on arena, it performs a &lt;em>deep copy&lt;/em> of the underlying data. In both cases
the source message is left in a valid but unspecified state.&lt;/li>
&lt;li>&lt;code>Message&amp;amp; operator=(Message&amp;amp;&amp;amp; other)&lt;/code>: If both messages are not on arena or
are on the &lt;em>same&lt;/em> arena, the move-assignment operator efficiently &lt;em>moves&lt;/em>
all fields from one message to another without making copies or heap
allocations (the time complexity of this operation is
&lt;code>O(number-of-declared-fields)&lt;/code>). However, if only one message is on arena,
or the messages are on different arenas, it performs a &lt;em>deep copy&lt;/em> of the
underlying data. In both cases the source message is left in a valid but
unspecified state.&lt;/li>
&lt;li>&lt;code>void Swap(Message* other)&lt;/code>: If both messages to be swapped are not on
arenas or are on the &lt;em>same&lt;/em> arena,
&lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/#message">&lt;code>Swap()&lt;/code>&lt;/a>
behaves as it does without having arena allocation enabled: it efficiently
swaps the message objects&amp;rsquo; contents, almost exclusively through cheap
pointer swaps, avoiding copies. However, if only one message is on an arena,
or the messages are on different arenas, &lt;code>Swap()&lt;/code> performs &lt;em>deep copies&lt;/em> of
the underlying data. This new behavior is necessary because otherwise the
swapped sub-objects could have differing lifetimes, leading potentially to
use-after-free bugs.&lt;/li>
&lt;li>&lt;code>Message* New(Arena* arena)&lt;/code>: An alternate override for the standard &lt;code>New()&lt;/code>
method. It allows a new message object of this type to be created on the
given arena. Its semantics are identical to &lt;code>Arena::CreateMessage&amp;lt;T&amp;gt;(arena)&lt;/code>
if the concrete message type on which it is called is generated with arena
allocation enabled. If the message type is not generated with arena
allocation enabled, then it is equivalent to an ordinary allocation followed
by &lt;code>arena-&amp;gt;Own(message)&lt;/code> if &lt;code>arena&lt;/code> is not NULL.&lt;/li>
&lt;li>&lt;code>Arena* GetArena()&lt;/code>: Returns the arena on which this message object was
allocated, if any.&lt;/li>
&lt;li>&lt;code>void UnsafeArenaSwap(Message* other)&lt;/code>: Identical to &lt;code>Swap()&lt;/code>, except it
assumes both objects are on the same arena (or not on arenas at all) and
always uses the efficient pointer-swapping implementation of this operation.
Using this method can improve performance as, unlike &lt;code>Swap()&lt;/code>, it doesn&amp;rsquo;t
need to check which messages live on which arena before performing the swap.
As the &lt;code>Unsafe&lt;/code> prefix suggests, you should only use this method if you are
sure the messages you want to swap aren&amp;rsquo;t on different arenas; otherwise
this method could have unpredictable results.&lt;/li>
&lt;/ul>
&lt;h3 id="arenaembeddedmessage">Embedded Message Fields&lt;/h3>
&lt;p>When you allocate a message object on an arena, its embedded message field
objects (submessages) are automatically owned by the arena as well. How these
message objects are allocated depends on where they are defined:&lt;/p>
&lt;ul>
&lt;li>If the message type is also defined in a &lt;code>.proto&lt;/code> file with arena allocation
enabled, the object is allocated on the arena directly.&lt;/li>
&lt;li>If the message type is from another &lt;code>.proto&lt;/code> without arena allocation
enabled, the object is heap-allocated but is &amp;ldquo;owned&amp;rdquo; by the parent message&amp;rsquo;s
arena. This means that when the arena is destroyed, the object will be freed
along with the objects on the arena itself.&lt;/li>
&lt;/ul>
&lt;p>For either of these field definitions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following methods are added or have some special behavior when arena
allocation is enabled. Otherwise, accessor methods just use the
&lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/#embeddedmessage">default behavior&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>Bar* mutable_foo()&lt;/code>: Returns a mutable pointer to the submessage instance.
If the parent object is on an arena then the returned object will be as
well.&lt;/li>
&lt;li>&lt;code>void set_allocated_foo(Bar* bar)&lt;/code>: Takes a new object and adopts it as the
new value for the field. Arena support adds additional copying semantics to
maintain proper ownership when objects cross arena/arena or arena/heap
boundaries:
&lt;ul>
&lt;li>If the parent object is on the heap and &lt;code>bar&lt;/code> is on the heap, or if the
parent and message are on the same arena, this method&amp;rsquo;s behavior is
unchanged.&lt;/li>
&lt;li>If the parent is on an arena and &lt;code>bar&lt;/code> is on the heap, the parent
message adds &lt;code>bar&lt;/code> to its arena&amp;rsquo;s ownership list with &lt;code>arena-&amp;gt;Own()&lt;/code>.&lt;/li>
&lt;li>If the parent is on an arena and &lt;code>bar&lt;/code> is on a different arena, this
method makes a copy of message and takes the copy as the new field
value.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Bar* release_foo()&lt;/code>: Returns the existing submessage instance of the field,
if set, or a NULL pointer if not set, releasing ownership of this instance
to the caller and clearing the parent message&amp;rsquo;s field. Arena support adds
additional copying semantics to maintain the contract that the returned
object is always &lt;em>heap-allocated&lt;/em>:
&lt;ul>
&lt;li>If the parent message is on an arena, this method will make a copy of
the submessage on the heap, clear the field value, and return the copy.&lt;/li>
&lt;li>If the parent message is on the heap, the method behavior is unchanged.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>void unsafe_arena_set_allocated_foo(Bar* bar)&lt;/code>: Identical to
&lt;code>set_allocated_foo&lt;/code>, but assumes both parent and submessage are on the same
arena. Using this version of the method can improve performance as it
doesn&amp;rsquo;t need to check whether the messages are on a particular arena or the
heap. See &lt;a href="https://protobuf.dev/reference/cpp/arenas/#set-allocated">allocated/release patterns&lt;/a> for details on safe
ways to use this.&lt;/li>
&lt;li>&lt;code>Bar* unsafe_arena_release_foo()&lt;/code>: Similar to &lt;code>release_foo()&lt;/code>, but skips all
ownership checking. See &lt;a href="https://protobuf.dev/reference/cpp/arenas/#set-allocated">allocated/release patterns&lt;/a> for
details on safe ways to use this.&lt;/li>
&lt;/ul>
&lt;h3 id="arenastring">String Fields&lt;/h3>
&lt;p>Currently, string fields store their data on the heap even when their parent
message is on the arena. Because of this, string accessor methods use the
&lt;a href="https://protobuf.dev/reference/cpp/cpp-generated/#string">default behavior&lt;/a>
even when arena allocation is enabled.&lt;/p>
&lt;h3 id="arenarepeated">Repeated Fields&lt;/h3>
&lt;p>Repeated fields allocate their internal array storage on the arena when the
containing message is arena-allocated, and also allocate their elements on the
arena when these elements are separate objects retained by pointer (messages or
strings). At the message-class level, generated methods for repeated fields do
not change. However, the &lt;code>RepeatedField&lt;/code> and &lt;code>RepeatedPtrField&lt;/code> objects that are
returned by accessors do have new methods and modified semantics when arena
support is enabled.&lt;/p>
&lt;h4 id="repeated-numeric">Repeated Numeric Fields&lt;/h4>
&lt;p>&lt;code>RepeatedField&lt;/code> objects that contain primitive types have the following
new/changed methods when arena allocation is enabled:&lt;/p>
&lt;ul>
&lt;li>&lt;code>void UnsafeArenaSwap(RepeatedField* other)&lt;/code>: Performs a swap of
&lt;code>RepeatedField&lt;/code> contents without validating that this repeated field and
other are on the same arena. If they are not, the two repeated field objects
must be on arenas with equivalent lifetimes. The case where one is on an
arena and one is on the heap is checked and disallowed.&lt;/li>
&lt;li>&lt;code>void Swap(RepeatedField* other)&lt;/code>: Checks each repeated field object&amp;rsquo;s
arena, and if one is on an arena while one is on the heap or if both are on
arenas but on different ones, the underlying arrays are copied before the
swap occurs. This means that after the swap, each repeated field object
holds an array on its own arena or heap, as appropriate.&lt;/li>
&lt;/ul>
&lt;h4 id="repeated-embedded">Repeated Embedded Message Fields&lt;/h4>
&lt;p>&lt;code>RepeatedPtrField&lt;/code> objects that contain messages have the following new/changed
methods when arena allocation is enabled.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>void UnsafeArenaSwap(RepeatedPtrField* other)&lt;/code>: Performs a swap of
&lt;code>RepeatedPtrField&lt;/code> contents without validating that this repeated field and
other have the same arena pointer. If they do not, the two repeated field
objects must have arena pointers with equivalent lifetimes. The case where
one has a non-NULL arena pointer and one has a NULL arena pointer is checked
and disallowed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>void Swap(RepeatedPtrField* other)&lt;/code>: Checks each repeated field object&amp;rsquo;s
arena pointer, and if one is non-NULL (contents on arena) while one is NULL
(contents on heap) or if both are non-NULL but have different values, the
underlying arrays and their pointed-to objects are copied before the swap
occurs. This means that after the swap, each repeated field object holds an
array on its own arena or on the heap, as appropriate.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>void AddAllocated(SubMessageType* value)&lt;/code>: Checks that the provided message
object is on the same arena as the repeated field&amp;rsquo;s arena pointer.&lt;/p>
&lt;ul>
&lt;li>The source and destination are both arena-allocated and on the same
arena: the object pointer is added directly to the underlying array.&lt;/li>
&lt;li>The source and destination are both arena-allocated and on different
arenas: a copy is made, the original is freed if it was heap-allocated,
and the copy is placed on the array.&lt;/li>
&lt;li>The source is heap-allocated and the destination is arena-allocated: No
copy is made.&lt;/li>
&lt;li>The source is arena-allocated and the destination is heap-allocated: A
copy is made and placed on the array.&lt;/li>
&lt;li>Both source and destination are heap allocated: The object pointer is
added directly to the underlying array.&lt;/li>
&lt;/ul>
&lt;p>This maintains the invariant that all objects pointed to by a repeated field
are in the same ownership domain (heap or specific arena) as indicated by
the repeated field&amp;rsquo;s arena pointer.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SubMessageType* ReleaseLast()&lt;/code>: Returns a heap-allocated message equivalent
to the last message in the repeated field, removing it from the repeated
field. If the repeated field itself has a NULL arena pointer (and thus, all
of its pointed-to messages are heap-allocated), then this method simply
returns a pointer to the original object. Otherwise, if the repeated field
has a non-NULL arena pointer, this method makes a copy that is
heap-allocated and returns that copy. In both cases, the caller receives
ownership of a heap-allocated object and is responsible for deleting the
object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>void UnsafeArenaAddAllocated(SubMessageType* value)&lt;/code>: Like
&lt;code>AddAllocated()&lt;/code>, but does not perform heap/arena checks or any message
copies. It adds the provided pointer directly to the internal array of
pointers for this repeated field. See
&lt;a href="https://protobuf.dev/reference/cpp/arenas/#set-allocated">allocated/release patterns&lt;/a> for details on safe ways to use
this.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SubMessageType* UnsafeArenaReleaseLast()&lt;/code>: Like &lt;code>ReleaseLast()&lt;/code> but
performs no copies, even if the repeated field has a non-NULL arena pointer.
Instead, it directly returns the pointer to the object as it was in the
repeated field. See &lt;a href="https://protobuf.dev/reference/cpp/arenas/#set-allocated">allocated/release patterns&lt;/a> for details
on safe ways to use this.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>void ExtractSubrange(int start, int num, SubMessageType** elements)&lt;/code>:
Removes &lt;code>num&lt;/code> elements from the repeated field, starting from index &lt;code>start&lt;/code>,
and returns them in &lt;code>elements&lt;/code> if it is not NULL. If the repeated field is
on an arena, and elements are being returned, the elements are copied to the
heap first. In both cases (arena or no arena), the caller owns the returned
objects on the heap.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>void UnsafeArenaExtractSubrange(int start, int num, SubMessageType** elements)&lt;/code>: Removes &lt;code>num&lt;/code> elements from the repeated field, starting from
index &lt;code>start&lt;/code>, and returns them in &lt;code>elements&lt;/code> if it is not NULL. Unlike
&lt;code>ExtractSubrange()&lt;/code>, this method never copies the extracted elements. See
&lt;a href="https://protobuf.dev/reference/cpp/arenas/#set-allocated">allocated/release patterns&lt;/a> for details on safe ways to use
this.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="repeated-string">Repeated String Fields&lt;/h4>
&lt;p>Repeated fields of strings have the same new methods and modified semantics as
repeated fields of messages, because they also maintain their underlying objects
(namely, strings) by pointer reference.&lt;/p>
&lt;h2 id="usage">Usage Patterns and Best Practices&lt;/h2>
&lt;p>When using arena-allocated messages, several usage patterns can result in
unintended copies or other negative performance effects. You should be aware of
the following common patterns that may need to be altered when adapting code for
arenas. (Note that we have taken care in the API design to ensure that correct
behavior still occurs &amp;mdash; but higher-performance solutions may require some
reworking.)&lt;/p>
&lt;h3 id="unintended">Unintended Copies&lt;/h3>
&lt;p>Several methods that never create object copies when not using arena allocation
may end up doing so when arena support is enabled. These unwanted copies can be
avoided if you make sure that your objects are allocated appropriately and/or
use provided arena-specific method versions, as described in more detail below.&lt;/p>
&lt;h4 id="set-allocated">Set Allocated/Add Allocated/Release&lt;/h4>
&lt;p>By default, the &lt;code>release_field()&lt;/code> and &lt;code>set_allocated_field()&lt;/code> methods (for
singular message fields), and the &lt;code>ReleaseLast()&lt;/code> and &lt;code>AddAllocated()&lt;/code> methods
(for repeated message fields) allow user code to directly attach and detach
submessages, passing ownership of pointers without copying any data.&lt;/p>
&lt;p>However, when the parent message is on an arena, these methods now sometimes
need to copy the passed in or returned object to maintain compatibility with
existing ownership contracts. More specifically, methods that take ownership
(&lt;code>set_allocated_field()&lt;/code> and &lt;code>AddAllocated()&lt;/code>) may copy data if the parent is on
an arena and the new subobject is not, or vice versa, or they are on different
arenas. Methods that release ownership (&lt;code>release_field()&lt;/code> and &lt;code>ReleaseLast()&lt;/code>)
may copy data if the parent is on the arena, because the returned object must be
on the heap, by contract.&lt;/p>
&lt;p>To avoid such copies, we have added corresponding &amp;ldquo;unsafe arena&amp;rdquo; versions of
these methods where copies are &lt;strong>never performed&lt;/strong>:
&lt;code>unsafe_arena_set_allocated_field()&lt;/code>, &lt;code>unsafe_arena_release_field()&lt;/code>,
&lt;code>UnsafeArenaAddAllocated()&lt;/code>, and &lt;code>UnsafeArenaRelease()&lt;/code> for singular and
repeated fields, respectively. These methods should be used only when you know
they are safe to do so. There are two common patterns for these methods:&lt;/p>
&lt;ul>
&lt;li>Moving messages trees between parts of the same arena. Note that the
messages must be on the same arena for this case to be safe.&lt;/li>
&lt;li>Temporarily loaning an owned message to a tree to avoid copies. Pairing an
unsafe &lt;em>add&lt;/em>/&lt;em>set&lt;/em> method with an unsafe &lt;em>release&lt;/em> method performs the loan
in the cheapest way possible regardless of how either message is owned (this
pattern works when they are on the same arena, different arena, or no arena
at all). Note that between the unsafe &lt;em>add&lt;/em>/&lt;em>set&lt;/em> and its corresponding
&lt;em>release&lt;/em>, the borrower must not be swapped, moved, cleared or destroyed;
the loaned message must not be swapped or moved; the loaned message must not
be cleared or released by the borrower; and the loaned message must not be
destroyed.&lt;/li>
&lt;/ul>
&lt;p>Here&amp;rsquo;s an example of how you can avoid unnecessary copies with these methods.
Let&amp;rsquo;s say you have created the following messages on an arena.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">arena&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">arena_message_1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">CreateMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arena_message_1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">mutable_nested_message&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">set_feature_id&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">arena_message_2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">CreateMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following code makes inefficient usage of the &lt;code>release_...()&lt;/code> API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arena_message_2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">set_allocated_nested_message&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">arena_message_1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">release_nested_message&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arena_message_1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">release_message&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// returns a copy of the underlying nested_message and deletes underlying pointer
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using the &amp;ldquo;unsafe arena&amp;rdquo; version instead avoids the copy:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arena_message_2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">unsafe_arena_set_allocated_nested_message&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">arena_message_1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">unsafe_arena_release_nested_message&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find out more about these methods in the
&lt;a href="https://protobuf.dev/reference/cpp/arenas/#arenaembeddedmessage">Embedded message fields&lt;/a> section above.&lt;/p>
&lt;h4 id="swap">Swap&lt;/h4>
&lt;p>When two messages&amp;rsquo; contents are swapped with &lt;code>Swap()&lt;/code>, the underlying subobjects
may be copied if the two messages live on different arenas, or if one is on the
arena and the other is on the heap. If you want to avoid this copy and either
(i) know that the two messages are on the same arena or different arenas but the
arenas have equivalent lifetimes, or (ii) know that the two messages are on the
heap, you can use a new method, &lt;code>UnsafeArenaSwap()&lt;/code>. This method both avoids the
overhead of performing the arena check and avoids the copy if one would have
occurred.&lt;/p>
&lt;p>For example, the following code incurs a copy in the &lt;code>Swap()&lt;/code> call:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">message_1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">CreateMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message_1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">mutable_nested_message&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">set_feature_id&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">message_2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message_2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">mutable_nested_message&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">set_feature_id&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">22&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message_1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">Swap&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">message_2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Inefficient swap!
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To avoid the copy in this code, you allocate &lt;code>message_2&lt;/code> on the same arena as
&lt;code>message_1&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">message_2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">CreateMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="granularity">Granularity&lt;/h3>
&lt;p>We have found in most application server use cases that an &amp;ldquo;arena-per-request&amp;rdquo;
model works well. You may be tempted to divide arena use further, either to
reduce heap overhead (by destroying smaller arenas more often) or to reduce
perceived thread-contention issues. However, the use of more fine-grained arenas
may lead to unintended message copying, as we describe above. We have also spent
effort to optimize the &lt;code>Arena&lt;/code> implementation for the multithreaded use-case, so
a single arena should be appropriate for use throughout a request lifetime even
if multiple threads process that request.&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>Here&amp;rsquo;s a simple complete example demonstrating some of the features of the arena
allocation API.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// my_feature.proto
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000">syntax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;proto2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;nested_message.proto&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">feature_package&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// NEXT Tag to use: 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">MyFeatureMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">feature_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">feature_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">NestedMessage&lt;/span> &lt;span style="color:#000">nested_message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// nested_message.proto
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000">syntax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;proto2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">feature_package&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// NEXT Tag to use: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">NestedMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">feature_id&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Message construction and deallocation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;google/protobuf/arena.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Arena&lt;/span> &lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">arena_message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">Arena&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">::&lt;/span>&lt;span style="color:#000">CreateMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">MyFeatureMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">arena&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arena_message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">set_feature_name&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Proto2 Arena&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arena_message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">mutable_feature_data&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arena_message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">mutable_feature_data&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">arena_message&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">mutable_nested_message&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#000">set_feature_id&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">247&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Currently, string fields store their data on the heap even when the
containing message is on the arena. Unknown fields are also
heap-allocated.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Reference:</title><link>https://protobuf.dev/reference/cpp/api-docs-link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/reference/cpp/api-docs-link/</guid><description>
&lt;!-- mdformat global-off -->
&lt;hr>
&lt;h2 id="weight-530">title: &amp;ldquo;C++ API&amp;rdquo;
manualLink: &amp;ldquo;/reference/cpp/api-docs/&amp;rdquo;
manualLinkTarget: &amp;ldquo;_blank&amp;rdquo;
weight: 530&lt;/h2></description></item><item><title>Reference: C++ Reference</title><link>https://protobuf.dev/reference/cpp/api-docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/reference/cpp/api-docs/</guid><description>
&lt;table width="100%">&lt;tr>&lt;th colspan="2">&lt;h3 style="margin-top: 4px">Packages&lt;/h3>&lt;/th>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="#google.protobuf">google::protobuf&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">&lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="#google.protobuf.io">google::protobuf::io&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Auxiliary classes used for I/O. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="#google.protobuf.util">google::protobuf::util&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Utility classes. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="#google.protobuf.compiler">google::protobuf::compiler&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Implementation of the Protocol Buffer compiler. &lt;/div>&lt;/td>&lt;/tr>&lt;/table>&lt;h2 id="google.protobuf">google::protobuf&lt;/h2>&lt;p>&lt;/p>&lt;table width="100%">&lt;tr>&lt;th colspan="2">&lt;h3 style="margin-top: 4px">Files&lt;/h3>&lt;/th>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.arena">google/protobuf/arena.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">This file defines an &lt;a href='google.protobuf.arena#Arena'>Arena&lt;/a> allocator for better allocation performance. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.descriptor">google/protobuf/descriptor.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">This file contains classes which describe a type of protocol message. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.descriptor.pb">google/protobuf/descriptor.pb.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Protocol buffer representations of descriptors.&lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.descriptor_database">google/protobuf/descriptor_database.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Interface for manipulating databases of descriptors. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.dynamic_message">google/protobuf/dynamic_message.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Defines an implementation of &lt;a href='google.protobuf.message#Message'>Message&lt;/a> which can emulate types which are not known at compile-time. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.map">google/protobuf/map.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">This file defines the map container and its helpers to support protobuf maps. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.message">google/protobuf/message.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Defines &lt;a href='google.protobuf.message#Message'>Message&lt;/a>, the abstract interface implemented by non-lite protocol message objects. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.message_lite">google/protobuf/message_lite.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Defines &lt;a href='google.protobuf.message_lite#MessageLite'>MessageLite&lt;/a>, the abstract interface implemented by all (lite and non-lite) protocol message objects. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.repeated_field">google/protobuf/repeated_field.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">&lt;a href='google.protobuf.repeated_field#RepeatedField'>RepeatedField&lt;/a> and &lt;a href='google.protobuf.repeated_field#RepeatedPtrField'>RepeatedPtrField&lt;/a> are used by generated protocol message classes to manipulate repeated fields. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.service">google/protobuf/service.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">DEPRECATED: This module declares the abstract interfaces underlying proto2 RPC services. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.text_format">google/protobuf/text_format.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Utilities for printing and parsing protocol messages in a human-readable, text-based format. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.unknown_field_set">google/protobuf/unknown_field_set.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Contains classes used to keep track of unrecognized fields seen while parsing a protocol message. &lt;/div>&lt;/td>&lt;/tr>&lt;/table>&lt;h2 id="google.protobuf.io">google::protobuf::io&lt;/h2>&lt;p>Auxiliary classes used for I/O. &lt;/p>&lt;p>The Protocol Buffer library uses the classes in this package to deal with I/O and encoding/decoding raw bytes. Most users will not need to deal with this package. However, users who want to adapt the system to work with their own I/O abstractions &amp;ndash; e.g., to allow Protocol Buffers to be read from a different kind of input stream without the need for a temporary buffer &amp;ndash; should take a closer look. &lt;/p>
&lt;table width="100%">&lt;tr>&lt;th colspan="2">&lt;h3 style="margin-top: 4px">Files&lt;/h3>&lt;/th>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.io.coded_stream">google/protobuf/io/coded_stream.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">This file contains the &lt;a href='google.protobuf.io.coded_stream#CodedInputStream'>CodedInputStream&lt;/a> and &lt;a href='google.protobuf.io.coded_stream#CodedOutputStream'>CodedOutputStream&lt;/a> classes, which wrap a &lt;a href='google.protobuf.io.zero_copy_stream#ZeroCopyInputStream'>ZeroCopyInputStream&lt;/a> or &lt;a href='google.protobuf.io.zero_copy_stream#ZeroCopyOutputStream'>ZeroCopyOutputStream&lt;/a>, respectively, and allow you to read or write individual pieces of data in various formats. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.io.printer">google/protobuf/io/printer.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Utility class for writing text to a &lt;a href='google.protobuf.io.zero_copy_stream#ZeroCopyOutputStream'>ZeroCopyOutputStream&lt;/a>. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.io.tokenizer">google/protobuf/io/tokenizer.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Class for parsing tokenized text from a &lt;a href='google.protobuf.io.zero_copy_stream#ZeroCopyInputStream'>ZeroCopyInputStream&lt;/a>. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.io.zero_copy_stream">google/protobuf/io/zero_copy_stream.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">This file contains the &lt;a href='google.protobuf.io.zero_copy_stream#ZeroCopyInputStream'>ZeroCopyInputStream&lt;/a> and &lt;a href='google.protobuf.io.zero_copy_stream#ZeroCopyOutputStream'>ZeroCopyOutputStream&lt;/a> interfaces, which represent abstract I/O streams to and from which protocol buffers can be read and written. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.io.zero_copy_stream_impl">google/protobuf/io/zero_copy_stream_impl.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">This file contains common implementations of the interfaces defined in &lt;a href='google.protobuf.io.zero_copy_stream'>zero_copy_stream.h&lt;/a> which are only included in the full (non-lite) protobuf library. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.io.zero_copy_stream_impl_lite">google/protobuf/io/zero_copy_stream_impl_lite.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">This file contains common implementations of the interfaces defined in &lt;a href='google.protobuf.io.zero_copy_stream'>zero_copy_stream.h&lt;/a> which are included in the "lite" protobuf library. &lt;/div>&lt;/td>&lt;/tr>&lt;/table>&lt;h2 id="google.protobuf.util">google::protobuf::util&lt;/h2>&lt;p>Utility classes. &lt;/p>&lt;p>This package contains various utilities for message comparison, JSON conversion, well known types, etc. &lt;/p>
&lt;table width="100%">&lt;tr>&lt;th colspan="2">&lt;h3 style="margin-top: 4px">Files&lt;/h3>&lt;/th>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.util.field_comparator">google/protobuf/util/field_comparator.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Defines classes for field comparison. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.util.field_mask_util">google/protobuf/util/field_mask_util.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Defines utilities for the FieldMask well known type. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.util.json_util">google/protobuf/util/json_util.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Utility functions to convert between protobuf binary format and proto3 JSON format. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.util.message_differencer">google/protobuf/util/message_differencer.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">This file defines static methods and classes for comparing Protocol Messages. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.util.time_util">google/protobuf/util/time_util.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Defines utilities for the Timestamp and Duration well known types. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.util.type_resolver">google/protobuf/util/type_resolver.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Defines a TypeResolver for the Any message. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.util.type_resolver_util">google/protobuf/util/type_resolver_util.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Defines utilities for the TypeResolver. &lt;/div>&lt;/td>&lt;/tr>&lt;/table>&lt;h2 id="google.protobuf.compiler">google::protobuf::compiler&lt;/h2>&lt;p>Implementation of the Protocol Buffer compiler. &lt;/p>&lt;p>This package contains code for parsing .proto files and generating code based on them. There are two reasons you might be interested in this package:&lt;/p>
&lt;ul>
&lt;li>You want to parse .proto files at runtime. In this case, you should look at &lt;a href='google.protobuf.compiler.importer'>importer.h&lt;/a>. Since this functionality is widely useful, it is included in the libprotobuf base library; you do not have to link against libprotoc.&lt;/li>
&lt;li>You want to write a custom protocol compiler which generates different kinds of code, e.g. code in a different language which is not supported by the official compiler. For this purpose, &lt;a href='google.protobuf.compiler.command_line_interface'>command_line_interface.h&lt;/a> provides you with a complete compiler front-end, so all you need to do is write a custom implementation of &lt;a href='google.protobuf.compiler.code_generator#CodeGenerator'>CodeGenerator&lt;/a> and a trivial main() function. You can even make your compiler support the official languages in addition to your own. Since this functionality is only useful to those writing custom compilers, it is in a separate library called "libprotoc" which you will have to link against. &lt;/li>
&lt;/ul>
&lt;table width="100%">&lt;tr>&lt;th colspan="2">&lt;h3 style="margin-top: 4px">Files&lt;/h3>&lt;/th>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.code_generator">google/protobuf/compiler/code_generator.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Defines the abstract interface implemented by each of the language-specific code generators. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.command_line_interface">google/protobuf/compiler/command_line_interface.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Implements the Protocol Compiler front-end such that it may be reused by custom compilers written to support other languages. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.importer">google/protobuf/compiler/importer.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">This file is the public interface to the .proto file parser. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.parser">google/protobuf/compiler/parser.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Implements parsing of .proto files to FileDescriptorProtos. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.plugin">google/protobuf/compiler/plugin.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Front-end for protoc code generator plugins written in C++. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.plugin.pb">google/protobuf/compiler/plugin.pb.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">API for protoc plugins.&lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.cpp_generator">google/protobuf/compiler/cpp/cpp_generator.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Generates C++ code for a given .proto file. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.csharp_generator">google/protobuf/compiler/csharp/csharp_generator.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Generates C# code for a given .proto file. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.csharp_names">google/protobuf/compiler/csharp/csharp_names.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Provides a mechanism for mapping a descriptor to the fully-qualified name of the corresponding C# class. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.java_generator">google/protobuf/compiler/java/java_generator.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Generates Java code for a given .proto file. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.java_names">google/protobuf/compiler/java/java_names.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Provides a mechanism for mapping a descriptor to the fully-qualified name of the corresponding Java class. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.js_generator">google/protobuf/compiler/js/js_generator.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Generates JavaScript code for a given .proto file. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.objectivec_generator">google/protobuf/compiler/objectivec/objectivec_generator.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Generates ObjectiveC code for a given .proto file. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.objectivec_helpers">google/protobuf/compiler/objectivec/objectivec_helpers.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Helper functions for generating ObjectiveC code. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.python_generator">google/protobuf/compiler/python/python_generator.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Generates Python code for a given .proto file. &lt;/div>&lt;/td>&lt;/tr>&lt;tr>&lt;td>&lt;div>&lt;code>&lt;a href="google.protobuf.compiler.ruby_generator">google/protobuf/compiler/ruby/ruby_generator.h&lt;/a>&lt;/code>&lt;/div>&lt;div style="font-style: italic; margin-top: 4px; margin-left: 16px;">Generates Ruby code for a given .proto file. &lt;/div>&lt;/td>&lt;/tr>&lt;/table></description></item></channel></rss>