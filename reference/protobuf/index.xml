<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Protocol Buffers Documentation â€“ Protocol Buffers Reference</title><link>https://protobuf.dev/reference/protobuf/</link><description>Recent content in Protocol Buffers Reference on Protocol Buffers Documentation</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://protobuf.dev/reference/protobuf/index.xml" rel="self" type="application/rss+xml"/><item><title>Reference: Protocol Buffers Version 2 Language Specification</title><link>https://protobuf.dev/reference/protobuf/proto2-spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/reference/protobuf/proto2-spec/</guid><description>
&lt;p>The syntax is specified using
&lt;a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form">Extended Backus-Naur Form (EBNF)&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>| alternation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>() grouping
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[] option (zero or one time)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{} repetition (any number of times)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For more information about using proto2, see the
&lt;a href="https://protobuf.dev/programming-guides/proto2/">language guide&lt;/a>.&lt;/p>
&lt;h2 id="lexical_elements">Lexical Elements&lt;/h2>
&lt;h3 id="letters_and_digits">Letters and Digits&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>letter = &amp;#34;A&amp;#34; ... &amp;#34;Z&amp;#34; | &amp;#34;a&amp;#34; ... &amp;#34;z&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>capitalLetter = &amp;#34;A&amp;#34; ... &amp;#34;Z&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>decimalDigit = &amp;#34;0&amp;#34; ... &amp;#34;9&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>octalDigit = &amp;#34;0&amp;#34; ... &amp;#34;7&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hexDigit = &amp;#34;0&amp;#34; ... &amp;#34;9&amp;#34; | &amp;#34;A&amp;#34; ... &amp;#34;F&amp;#34; | &amp;#34;a&amp;#34; ... &amp;#34;f&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="identifiers">Identifiers&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">letter&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">letter&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">decimalDigit&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fullIdent&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">messageName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fieldName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">oneofName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mapName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">serviceName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">rpcName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">streamName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">messageType&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000">messageName&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumType&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000">enumName&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">groupName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">capitalLetter&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">letter&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">decimalDigit&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="integer_literals">Integer Literals&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>intLit = decimalLit | octalLit | hexLit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>decimalLit = [-] ( &amp;#34;1&amp;#34; ... &amp;#34;9&amp;#34; ) { decimalDigit }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>octalLit = [-] &amp;#34;0&amp;#34; { octalDigit }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hexLit = [-] &amp;#34;0&amp;#34; ( &amp;#34;x&amp;#34; | &amp;#34;X&amp;#34; ) hexDigit { hexDigit }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="floating-point-literals">Floating-point Literals&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>floatLit = [-] ( decimals &amp;#34;.&amp;#34; [ decimals ] [ exponent ] | decimals exponent | &amp;#34;.&amp;#34;decimals [ exponent ] ) | &amp;#34;inf&amp;#34; | &amp;#34;nan&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>decimals = [-] decimalDigit { decimalDigit }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exponent = ( &amp;#34;e&amp;#34; | &amp;#34;E&amp;#34; ) [ &amp;#34;+&amp;#34; | &amp;#34;-&amp;#34; ] decimals
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="boolean">Boolean&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>boolLit = &amp;#34;true&amp;#34; | &amp;#34;false&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="string_literals">String Literals&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>strLit = strLitSingle { strLitSingle }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strLitSingle = ( &amp;#34;&amp;#39;&amp;#34; { charValue } &amp;#34;&amp;#39;&amp;#34; ) | ( &amp;#39;&amp;#34;&amp;#39; { charValue } &amp;#39;&amp;#34;&amp;#39; )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>charValue = hexEscape | octEscape | charEscape | unicodeEscape | unicodeLongEscape | /[^\0\n\\]/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hexEscape = &amp;#39;\&amp;#39; ( &amp;#34;x&amp;#34; | &amp;#34;X&amp;#34; ) hexDigit [ hexDigit ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>octEscape = &amp;#39;\&amp;#39; octalDigit [ octalDigit [ octalDigit ] ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>charEscape = &amp;#39;\&amp;#39; ( &amp;#34;a&amp;#34; | &amp;#34;b&amp;#34; | &amp;#34;f&amp;#34; | &amp;#34;n&amp;#34; | &amp;#34;r&amp;#34; | &amp;#34;t&amp;#34; | &amp;#34;v&amp;#34; | &amp;#39;\&amp;#39; | &amp;#34;&amp;#39;&amp;#34; | &amp;#39;&amp;#34;&amp;#39; )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unicodeEscape = &amp;#39;\&amp;#39; &amp;#34;u&amp;#34; hexDigit hexDigit hexDigit hexDigit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unicodeLongEscape = &amp;#39;\&amp;#39; &amp;#34;U&amp;#34; ( &amp;#34;000&amp;#34; hexDigit hexDigit hexDigit hexDigit hexDigit |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;0010&amp;#34; hexDigit hexDigit hexDigit hexDigit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="emptystatement">EmptyStatement&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>emptyStatement = &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="constant">Constant&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">constant&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fullIdent&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;+&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">intLit&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;+&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">floatLit&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">strLit&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">boolLit&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">MessageValue&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>MessageValue&lt;/code> is defined in the
&lt;a href="https://protobuf.dev/reference/protobuf/textformat-spec/#fields">Text Format Language Specification&lt;/a>.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;/h2>
&lt;p>The syntax statement is used to define the protobuf version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>syntax = &amp;#34;syntax&amp;#34; &amp;#34;=&amp;#34; (&amp;#34;&amp;#39;&amp;#34; &amp;#34;proto2&amp;#34; &amp;#34;&amp;#39;&amp;#34; | &amp;#39;&amp;#34;&amp;#39; &amp;#34;proto2&amp;#34; &amp;#39;&amp;#34;&amp;#39;) &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="import_statement">Import Statement&lt;/h2>
&lt;p>The import statement is used to import another .proto&amp;rsquo;s definitions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>import = &amp;#34;import&amp;#34; [ &amp;#34;weak&amp;#34; | &amp;#34;public&amp;#34; ] strLit &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">public&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;other.proto&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="package">Package&lt;/h2>
&lt;p>The package specifier can be used to prevent name clashes between protocol
message types.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;package&amp;#34;&lt;/span> &lt;span style="color:#000">fullIdent&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="option">Option&lt;/h2>
&lt;p>Options can be used in proto files, messages, enums and services. An option can
be a protobuf defined option or a custom option. For more information, see
&lt;a href="https://protobuf.dev/programming-guides/proto2/#options">Options&lt;/a> in the
language guide.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">option&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;option&amp;#34;&lt;/span> &lt;span style="color:#000">optionName&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000">constant&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">optionName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;(&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">fullIdent&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;)&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">java_package&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;com.example.foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="fields">Fields&lt;/h2>
&lt;p>Fields are the basic elements of a protocol buffer message. Fields can be normal
fields, group fields, oneof fields, or map fields. A field has a label, type and
field number.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">label&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;required&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;optional&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;repeated&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">type&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;double&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;float&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;int32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;int64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;uint32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;uint64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sint32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sint64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;fixed32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;fixed64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sfixed32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sfixed64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bool&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;string&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bytes&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">messageType&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">enumType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fieldNumber&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">intLit&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="normal_field">Normal field&lt;/h3>
&lt;p>Each field has label, type, name and field number. It may have field options.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">field&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">label&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">fieldName&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000">fieldNumber&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;[&amp;#34;&lt;/span> &lt;span style="color:#000">fieldOptions&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;]&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fieldOptions&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fieldOption&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;,&amp;#34;&lt;/span> &lt;span style="color:#000">fieldOption&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fieldOption&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">optionName&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000">constant&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">foo.bar&lt;/span> &lt;span style="color:#000">nested_message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">samples&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">packed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="group_field">Group field&lt;/h3>
&lt;p>&lt;strong>Note that this feature is deprecated and should not be used when creating new
message types &amp;ndash; use nested message types instead.&lt;/strong>&lt;/p>
&lt;p>Groups are one way to nest information in message definitions. The group name
must begin with capital letter.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>group = label &amp;#34;group&amp;#34; groupName &amp;#34;=&amp;#34; fieldNumber messageBody
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">group&lt;/span> &lt;span style="color:#000">Result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">url&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">title&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">snippets&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="oneof_and_oneof_field">Oneof and oneof field&lt;/h3>
&lt;p>A oneof consists of oneof fields and a oneof name. Oneof fields do not have
labels.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>oneof = &amp;#34;oneof&amp;#34; oneofName &amp;#34;{&amp;#34; { option | oneofField } &amp;#34;}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>oneofField = type fieldName &amp;#34;=&amp;#34; fieldNumber [ &amp;#34;[&amp;#34; fieldOptions &amp;#34;]&amp;#34; ] &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">SubMessage&lt;/span> &lt;span style="color:#000">sub_message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="map_field">Map field&lt;/h3>
&lt;p>A map field has a key type, value type, name, and field number. The key type can
be any integral or string type. Note, the key type may not be an enum.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>mapField = &amp;#34;map&amp;#34; &amp;#34;&amp;lt;&amp;#34; keyType &amp;#34;,&amp;#34; type &amp;#34;&amp;gt;&amp;#34; mapName &amp;#34;=&amp;#34; fieldNumber [ &amp;#34;[&amp;#34; fieldOptions &amp;#34;]&amp;#34; ] &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>keyType = &amp;#34;int32&amp;#34; | &amp;#34;int64&amp;#34; | &amp;#34;uint32&amp;#34; | &amp;#34;uint64&amp;#34; | &amp;#34;sint32&amp;#34; | &amp;#34;sint64&amp;#34; |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;fixed32&amp;#34; | &amp;#34;fixed64&amp;#34; | &amp;#34;sfixed32&amp;#34; | &amp;#34;sfixed64&amp;#34; | &amp;#34;bool&amp;#34; | &amp;#34;string&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Project&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">projects&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="extensions_and_reserved">Extensions and Reserved&lt;/h2>
&lt;p>Extensions and reserved are message elements that declare a range of field
numbers or field names.&lt;/p>
&lt;h3 id="extensions">Extensions&lt;/h3>
&lt;p>Extensions declare that a range of field numbers in a message are available for
third-party extensions. Other people can declare new fields for your message
type with those numeric tags in their own .proto files without having to edit
the original file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>extensions = &amp;#34;extensions&amp;#34; ranges &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ranges = range { &amp;#34;,&amp;#34; range }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>range = intLit [ &amp;#34;to&amp;#34; ( intLit | &amp;#34;max&amp;#34; ) ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">extensions&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#204a87;font-weight:bold">to&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">199&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">extensions&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> &lt;span style="color:#204a87;font-weight:bold">to&lt;/span> &lt;span style="color:#204a87;font-weight:bold">max&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="reserved">Reserved&lt;/h3>
&lt;p>Reserved declares a range of field numbers or field names in a message that can
not be used.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>reserved = &amp;#34;reserved&amp;#34; ( ranges | strFieldNames ) &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strFieldNames = strFieldName { &amp;#34;,&amp;#34; strFieldName }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strFieldName = &amp;#34;&amp;#39;&amp;#34; fieldName &amp;#34;&amp;#39;&amp;#34; | &amp;#39;&amp;#34;&amp;#39; fieldName &amp;#39;&amp;#34;&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">reserved&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> &lt;span style="color:#204a87;font-weight:bold">to&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000">reserved&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="top_level_definitions">Top Level definitions&lt;/h2>
&lt;h3 id="enum_definition">Enum definition&lt;/h3>
&lt;p>The enum definition consists of a name and an enum body. The enum body can have
options, enum fields, and reserved statements.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;enum&amp;#34;&lt;/span> &lt;span style="color:#000">enumName&lt;/span> &lt;span style="color:#000">enumBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumBody&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;{&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">option&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">enumField&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">emptyStatement&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">reserved&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumField&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">intLit&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;[&amp;#34;&lt;/span> &lt;span style="color:#000">enumValueOption&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;,&amp;#34;&lt;/span> &lt;span style="color:#000">enumValueOption&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;]&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumValueOption&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">optionName&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000">constant&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">EnumAllowingAlias&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">allow_alias&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_STARTED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_RUNNING&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">[(&lt;/span>&lt;span style="color:#000">custom_option&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="message_definition">Message definition&lt;/h3>
&lt;p>A message consists of a message name and a message body. The message body can
have fields, nested enum definitions, nested message definitions, extend
statements, extensions, groups, options, oneofs, map fields, and reserved
statements. A message cannot contain two fields with the same name in the same
message schema.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;message&amp;#34;&lt;/span> &lt;span style="color:#000">messageName&lt;/span> &lt;span style="color:#000">messageBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">messageBody&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;{&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">field&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">extend&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">extensions&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">group&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">option&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">oneof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">mapField&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">reserved&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">emptyStatement&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Outer&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">my_option&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Inner&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Level 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int64&lt;/span> &lt;span style="color:#000">ival&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">my_map&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extensions&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> &lt;span style="color:#204a87;font-weight:bold">to&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>None of the entities declared inside a message may have conflicting names. All
of the following are prohibited:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">MyMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optional&lt;/span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">MyMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optional&lt;/span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">oneof&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">MyMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optional&lt;/span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">extend&lt;/span> &lt;span style="color:#000">Extendable&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optional&lt;/span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">MyMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optional&lt;/span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">E&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="extend">Extend&lt;/h3>
&lt;p>If a message in the same or imported .proto file has reserved a range for
extensions, the message can be extended.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>extend = &amp;#34;extend&amp;#34; messageType &amp;#34;{&amp;#34; {field | group} &amp;#34;}&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">extend&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">126&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="service_definition">Service definition&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>service = &amp;#34;service&amp;#34; serviceName &amp;#34;{&amp;#34; { option | rpc | emptyStatement } &amp;#34;}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rpc = &amp;#34;rpc&amp;#34; rpcName &amp;#34;(&amp;#34; [ &amp;#34;stream&amp;#34; ] messageType &amp;#34;)&amp;#34; &amp;#34;returns&amp;#34; &amp;#34;(&amp;#34; [ &amp;#34;stream&amp;#34; ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>messageType &amp;#34;)&amp;#34; (( &amp;#34;{&amp;#34; { option | emptyStatement } &amp;#34;}&amp;#34; ) | &amp;#34;;&amp;#34; )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span> &lt;span style="color:#000">SearchService&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rpc&lt;/span> &lt;span style="color:#000">Search&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">SearchRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">returns&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">SearchResponse&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="proto_file">Proto file&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">proto&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">syntax&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">import&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">package&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">option&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">topLevelDef&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">emptyStatement&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">topLevelDef&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">extend&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">service&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>An example .proto file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">syntax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;proto2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">public&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;other.proto&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">java_package&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;com.example.foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">EnumAllowingAlias&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">allow_alias&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_STARTED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_RUNNING&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_FINISHED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">[(&lt;/span>&lt;span style="color:#000">custom_option&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Outer&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">my_option&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Inner&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Level 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int64&lt;/span> &lt;span style="color:#000">ival&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#000">Inner&lt;/span> &lt;span style="color:#000">inner_message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">EnumAllowingAlias&lt;/span> &lt;span style="color:#000">enum_field&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">my_map&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extensions&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> &lt;span style="color:#204a87;font-weight:bold">to&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">group&lt;/span> &lt;span style="color:#000">GroupMessage&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Reference: Protocol Buffers Version 3 Language Specification</title><link>https://protobuf.dev/reference/protobuf/proto3-spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/reference/protobuf/proto3-spec/</guid><description>
&lt;p>The syntax is specified using
&lt;a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form">Extended Backus-Naur Form (EBNF)&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>| alternation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>() grouping
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[] option (zero or one time)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{} repetition (any number of times)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For more information about using proto3, see the
&lt;a href="https://protobuf.dev/programming-guides/proto3/">language guide&lt;/a>.&lt;/p>
&lt;h2 id="lexical_elements">Lexical Elements&lt;/h2>
&lt;h3 id="letters_and_digits">Letters and Digits&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>letter = &amp;#34;A&amp;#34; ... &amp;#34;Z&amp;#34; | &amp;#34;a&amp;#34; ... &amp;#34;z&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>decimalDigit = &amp;#34;0&amp;#34; ... &amp;#34;9&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>octalDigit = &amp;#34;0&amp;#34; ... &amp;#34;7&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hexDigit = &amp;#34;0&amp;#34; ... &amp;#34;9&amp;#34; | &amp;#34;A&amp;#34; ... &amp;#34;F&amp;#34; | &amp;#34;a&amp;#34; ... &amp;#34;f&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="identifiers">Identifiers&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">letter&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">letter&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">decimalDigit&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;_&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fullIdent&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">messageName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fieldName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">oneofName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mapName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">serviceName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">rpcName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">messageType&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000">messageName&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumType&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000">enumName&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="integer_literals">Integer Literals&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>intLit = decimalLit | octalLit | hexLit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>decimalLit = [-] ( &amp;#34;1&amp;#34; ... &amp;#34;9&amp;#34; ) { decimalDigit }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>octalLit = [-] &amp;#34;0&amp;#34; { octalDigit }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hexLit = [-] &amp;#34;0&amp;#34; ( &amp;#34;x&amp;#34; | &amp;#34;X&amp;#34; ) hexDigit { hexDigit }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="floating-point-literals">Floating-point Literals&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>floatLit = [-] ( decimals &amp;#34;.&amp;#34; [ decimals ] [ exponent ] | decimals exponent | &amp;#34;.&amp;#34;decimals [ exponent ] ) | &amp;#34;inf&amp;#34; | &amp;#34;nan&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>decimals = [-] decimalDigit { decimalDigit }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exponent = ( &amp;#34;e&amp;#34; | &amp;#34;E&amp;#34; ) [ &amp;#34;+&amp;#34; | &amp;#34;-&amp;#34; ] decimals
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="boolean">Boolean&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>boolLit = &amp;#34;true&amp;#34; | &amp;#34;false&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="string_literals">String Literals&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>strLit = strLitSingle { strLitSingle }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strLitSingle = ( &amp;#34;&amp;#39;&amp;#34; { charValue } &amp;#34;&amp;#39;&amp;#34; ) | ( &amp;#39;&amp;#34;&amp;#39; { charValue } &amp;#39;&amp;#34;&amp;#39; )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>charValue = hexEscape | octEscape | charEscape | unicodeEscape | unicodeLongEscape | /[^\0\n\\]/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hexEscape = &amp;#39;\&amp;#39; ( &amp;#34;x&amp;#34; | &amp;#34;X&amp;#34; ) hexDigit [ hexDigit ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>octEscape = &amp;#39;\&amp;#39; octalDigit [ octalDigit [ octalDigit ] ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>charEscape = &amp;#39;\&amp;#39; ( &amp;#34;a&amp;#34; | &amp;#34;b&amp;#34; | &amp;#34;f&amp;#34; | &amp;#34;n&amp;#34; | &amp;#34;r&amp;#34; | &amp;#34;t&amp;#34; | &amp;#34;v&amp;#34; | &amp;#39;\&amp;#39; | &amp;#34;&amp;#39;&amp;#34; | &amp;#39;&amp;#34;&amp;#39; )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unicodeEscape = &amp;#39;\&amp;#39; &amp;#34;u&amp;#34; hexDigit hexDigit hexDigit hexDigit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unicodeLongEscape = &amp;#39;\&amp;#39; &amp;#34;U&amp;#34; ( &amp;#34;000&amp;#34; hexDigit hexDigit hexDigit hexDigit hexDigit |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;0010&amp;#34; hexDigit hexDigit hexDigit hexDigit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="emptystatement">EmptyStatement&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>emptyStatement = &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="constant">Constant&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">constant&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fullIdent&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;+&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">intLit&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;+&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">floatLit&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">strLit&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">boolLit&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">MessageValue&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>MessageValue&lt;/code> is defined in the
&lt;a href="https://protobuf.dev/reference/protobuf/textformat-spec/#fields">Text Format Language Specification&lt;/a>.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;/h2>
&lt;p>The syntax statement is used to define the protobuf version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>syntax = &amp;#34;syntax&amp;#34; &amp;#34;=&amp;#34; (&amp;#34;&amp;#39;&amp;#34; &amp;#34;proto3&amp;#34; &amp;#34;&amp;#39;&amp;#34; | &amp;#39;&amp;#34;&amp;#39; &amp;#34;proto3&amp;#34; &amp;#39;&amp;#34;&amp;#39;) &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">syntax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="import_statement">Import Statement&lt;/h2>
&lt;p>The import statement is used to import another .proto&amp;rsquo;s definitions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>import = &amp;#34;import&amp;#34; [ &amp;#34;weak&amp;#34; | &amp;#34;public&amp;#34; ] strLit &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">public&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;other.proto&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="package">Package&lt;/h2>
&lt;p>The package specifier can be used to prevent name clashes between protocol
message types.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;package&amp;#34;&lt;/span> &lt;span style="color:#000">fullIdent&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="option">Option&lt;/h2>
&lt;p>Options can be used in proto files, messages, enums and services. An option can
be a protobuf defined option or a custom option. For more information, see
&lt;a href="https://protobuf.dev/programming-guides/proto3/#options">Options&lt;/a> in the
language guide.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">option&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;option&amp;#34;&lt;/span> &lt;span style="color:#000">optionName&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000">constant&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">optionName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">optionNamePart&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#000">optionNamePart&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">optionNamePart&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;(&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">fullIdent&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;)&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">java_package&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;com.example.foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="fields">Fields&lt;/h2>
&lt;p>Fields are the basic elements of a protocol buffer message. Fields can be normal
fields, oneof fields, or map fields. A field has a type and field number.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">type&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;double&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;float&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;int32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;int64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;uint32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;uint64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sint32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sint64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;fixed32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;fixed64&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sfixed32&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sfixed64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bool&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;string&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bytes&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">messageType&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">enumType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fieldNumber&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">intLit&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="normal_field">Normal Field&lt;/h3>
&lt;p>Each field has type, name and field number. It may have field options.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">field&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;repeated&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">type&lt;/span> &lt;span style="color:#000">fieldName&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000">fieldNumber&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;[&amp;#34;&lt;/span> &lt;span style="color:#000">fieldOptions&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;]&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fieldOptions&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fieldOption&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;,&amp;#34;&lt;/span> &lt;span style="color:#000">fieldOption&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fieldOption&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">optionName&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000">constant&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">foo.Bar&lt;/span> &lt;span style="color:#000">nested_message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">samples&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">packed&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="oneof_and_oneof_field">Oneof and Oneof Field&lt;/h3>
&lt;p>A oneof consists of oneof fields and a oneof name.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>oneof = &amp;#34;oneof&amp;#34; oneofName &amp;#34;{&amp;#34; { option | oneofField } &amp;#34;}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>oneofField = type fieldName &amp;#34;=&amp;#34; fieldNumber [ &amp;#34;[&amp;#34; fieldOptions &amp;#34;]&amp;#34; ] &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">SubMessage&lt;/span> &lt;span style="color:#000">sub_message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="map_field">Map Field&lt;/h3>
&lt;p>A map field has a key type, value type, name, and field number. The key type can
be any integral or string type.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>mapField = &amp;#34;map&amp;#34; &amp;#34;&amp;lt;&amp;#34; keyType &amp;#34;,&amp;#34; type &amp;#34;&amp;gt;&amp;#34; mapName &amp;#34;=&amp;#34; fieldNumber [ &amp;#34;[&amp;#34; fieldOptions &amp;#34;]&amp;#34; ] &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>keyType = &amp;#34;int32&amp;#34; | &amp;#34;int64&amp;#34; | &amp;#34;uint32&amp;#34; | &amp;#34;uint64&amp;#34; | &amp;#34;sint32&amp;#34; | &amp;#34;sint64&amp;#34; |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;fixed32&amp;#34; | &amp;#34;fixed64&amp;#34; | &amp;#34;sfixed32&amp;#34; | &amp;#34;sfixed64&amp;#34; | &amp;#34;bool&amp;#34; | &amp;#34;string&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Project&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">projects&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reserved">Reserved&lt;/h2>
&lt;p>Reserved statements declare a range of field numbers or field names that cannot
be used in this message.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>reserved = &amp;#34;reserved&amp;#34; ( ranges | strFieldNames ) &amp;#34;;&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ranges = range { &amp;#34;,&amp;#34; range }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>range = intLit [ &amp;#34;to&amp;#34; ( intLit | &amp;#34;max&amp;#34; ) ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strFieldNames = strFieldName { &amp;#34;,&amp;#34; strFieldName }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strFieldName = &amp;#34;&amp;#39;&amp;#34; fieldName &amp;#34;&amp;#39;&amp;#34; | &amp;#39;&amp;#34;&amp;#39; fieldName &amp;#39;&amp;#34;&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">reserved&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> &lt;span style="color:#204a87;font-weight:bold">to&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000">reserved&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="top_level_definitions">Top Level Definitions&lt;/h2>
&lt;h3 id="enum_definition">Enum Definition&lt;/h3>
&lt;p>The enum definition consists of a name and an enum body. The enum body can have
options, enum fields, and reserved statements.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;enum&amp;#34;&lt;/span> &lt;span style="color:#000">enumName&lt;/span> &lt;span style="color:#000">enumBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumBody&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;{&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">option&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">enumField&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">emptyStatement&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">reserved&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumField&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ident&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">intLit&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;[&amp;#34;&lt;/span> &lt;span style="color:#000">enumValueOption&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;,&amp;#34;&lt;/span> &lt;span style="color:#000">enumValueOption&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;]&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">enumValueOption&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">optionName&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#000">constant&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">EnumAllowingAlias&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">allow_alias&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_STARTED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_RUNNING&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">[(&lt;/span>&lt;span style="color:#000">custom_option&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="message_definition">Message Definition&lt;/h3>
&lt;p>A message consists of a message name and a message body. The message body can
have fields, nested enum definitions, nested message definitions, options,
oneofs, map fields, and reserved statements. A message cannot contain two fields
with the same name in the same message schema.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;message&amp;#34;&lt;/span> &lt;span style="color:#000">messageName&lt;/span> &lt;span style="color:#000">messageBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">messageBody&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;{&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">field&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">option&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">oneof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">mapField&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">reserved&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">emptyStatement&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Outer&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">my_option&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Inner&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Level 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int64&lt;/span> &lt;span style="color:#000">ival&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">my_map&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>None of the entities declared inside a message may have conflicting names. All
of the following are prohibited:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">MyMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optional&lt;/span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">MyMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optional&lt;/span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">oneof&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">MyMessage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">optional&lt;/span> &lt;span style="color:#000">string&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">E&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="service_definition">Service Definition&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>service = &amp;#34;service&amp;#34; serviceName &amp;#34;{&amp;#34; { option | rpc | emptyStatement } &amp;#34;}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rpc = &amp;#34;rpc&amp;#34; rpcName &amp;#34;(&amp;#34; [ &amp;#34;stream&amp;#34; ] messageType &amp;#34;)&amp;#34; &amp;#34;returns&amp;#34; &amp;#34;(&amp;#34; [ &amp;#34;stream&amp;#34; ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>messageType &amp;#34;)&amp;#34; (( &amp;#34;{&amp;#34; {option | emptyStatement } &amp;#34;}&amp;#34; ) | &amp;#34;;&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span> &lt;span style="color:#000">SearchService&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rpc&lt;/span> &lt;span style="color:#000">Search&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">SearchRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">returns&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">SearchResponse&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="proto_file">Proto File&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">proto&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">syntax&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">import&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">package&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">option&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">topLevelDef&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">emptyStatement&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">topLevelDef&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">service&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>An example .proto file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">syntax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">public&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;other.proto&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">java_package&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;com.example.foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">EnumAllowingAlias&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">allow_alias&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_STARTED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_RUNNING&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EAA_FINISHED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">[(&lt;/span>&lt;span style="color:#000">custom_option&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Outer&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">my_option&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Inner&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Level 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int64&lt;/span> &lt;span style="color:#000">ival&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#000">Inner&lt;/span> &lt;span style="color:#000">inner_message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">EnumAllowingAlias&lt;/span> &lt;span style="color:#000">enum_field&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">my_map&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Reference: Text Format Language Specification</title><link>https://protobuf.dev/reference/protobuf/textformat-spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/reference/protobuf/textformat-spec/</guid><description>
&lt;p>This format is distinct from the format of text
within a &lt;code>.proto&lt;/code> schema, for example. This document contains reference
documentation using the syntax specified in
&lt;a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form">ISO/IEC 14977 EBNF&lt;/a>.&lt;/p>
&lt;div class="alert alert-note" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This is a draft spec reverse-engineered from the C++ text format
&lt;a href="https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/text_format.cc">implementation&lt;/a>
and may change based on further discussion and review. While an effort has been
made to keep text formats consistent across supported languages,
incompatibilities are likely to exist.
&lt;/div>
&lt;h2 id="example">Example&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>convolution_benchmark {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> label: &amp;#34;NHWC_128x20x20x56x160&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dimension: [128, 56, 20, 20]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data_type: DATA_HALF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> format: TENSOR_NHWC
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="parsing">Parsing Overview&lt;/h2>
&lt;p>The language elements in this spec are split into lexical and syntactic
categories. Lexical elements must match the input text exactly as described, but
syntactic elements may be separated by optional &lt;code>WHITESPACE&lt;/code> and &lt;code>COMMENT&lt;/code>
tokens.&lt;/p>
&lt;p>For example, a signed floating point value comprises two syntactic elements: the
sign (&lt;code>-&lt;/code>) and the &lt;code>FLOAT&lt;/code> literal. Optional whitespace and comments may exist
between the sign and the number, but not within the number. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>value: -2.0 # Valid: no additional whitespace.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>value: - 2.0 # Valid: whitespace between &amp;#39;-&amp;#39; and &amp;#39;2.0&amp;#39;.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>value: -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # comment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.0 # Valid: whitespace and comments between &amp;#39;-&amp;#39; and &amp;#39;2.0&amp;#39;.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>value: 2 . 0 # Invalid: the floating point period is part of the lexical
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # element, so no additional whitespace is allowed.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is one edge case that requires special attention: a number token (&lt;code>FLOAT&lt;/code>,
&lt;code>DEC_INT&lt;/code>, &lt;code>OCT_INT&lt;/code>, or &lt;code>HEX_INT&lt;/code>) may not be immediately followed by an
&lt;code>IDENT&lt;/code> token. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>foo: 10 bar: 20 # Valid: whitespace separates &amp;#39;10&amp;#39; and &amp;#39;bar&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo: 10,bar: 20 # Valid: &amp;#39;,&amp;#39; separates &amp;#39;10&amp;#39; and &amp;#39;bar&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo: 10[com.foo.ext]: 20 # Valid: &amp;#39;10&amp;#39; is followed immediately by &amp;#39;[&amp;#39;, which is
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # not an identifier.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo: 10bar: 20 # Invalid: no space between &amp;#39;10&amp;#39; and identifier &amp;#39;bar&amp;#39;.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lexical">Lexical Elements&lt;/h2>
&lt;p>The lexical elements described below fall into two categories: uppercase primary
elements and lowercase fragments. Only primary elements are included in the
output stream of tokens used during syntactic analysis; fragments exist only to
simplify construction of primary elements.&lt;/p>
&lt;p>When parsing input text, the longest matching primary element wins. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>value: 10 # &amp;#39;10&amp;#39; is parsed as a DEC_INT token.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>value: 10f # &amp;#39;10f&amp;#39; is parsed as a FLOAT token, despite containing &amp;#39;10&amp;#39; which
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # would also match DEC_INT. In this case, FLOAT matches a longer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> # subsequence of the input.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="characters">Characters&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>char = ? Any non-NUL unicode character ? ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>newline = ? ASCII #10 (line feed) ? ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>letter = &amp;#34;A&amp;#34; | &amp;#34;B&amp;#34; | &amp;#34;C&amp;#34; | &amp;#34;D&amp;#34; | &amp;#34;E&amp;#34; | &amp;#34;F&amp;#34; | &amp;#34;G&amp;#34; | &amp;#34;H&amp;#34; | &amp;#34;I&amp;#34; | &amp;#34;J&amp;#34; | &amp;#34;K&amp;#34; | &amp;#34;L&amp;#34; | &amp;#34;M&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;N&amp;#34; | &amp;#34;O&amp;#34; | &amp;#34;P&amp;#34; | &amp;#34;Q&amp;#34; | &amp;#34;R&amp;#34; | &amp;#34;S&amp;#34; | &amp;#34;T&amp;#34; | &amp;#34;U&amp;#34; | &amp;#34;V&amp;#34; | &amp;#34;W&amp;#34; | &amp;#34;X&amp;#34; | &amp;#34;Y&amp;#34; | &amp;#34;Z&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;a&amp;#34; | &amp;#34;b&amp;#34; | &amp;#34;c&amp;#34; | &amp;#34;d&amp;#34; | &amp;#34;e&amp;#34; | &amp;#34;f&amp;#34; | &amp;#34;g&amp;#34; | &amp;#34;h&amp;#34; | &amp;#34;i&amp;#34; | &amp;#34;j&amp;#34; | &amp;#34;k&amp;#34; | &amp;#34;l&amp;#34; | &amp;#34;m&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;n&amp;#34; | &amp;#34;o&amp;#34; | &amp;#34;p&amp;#34; | &amp;#34;q&amp;#34; | &amp;#34;r&amp;#34; | &amp;#34;s&amp;#34; | &amp;#34;t&amp;#34; | &amp;#34;u&amp;#34; | &amp;#34;v&amp;#34; | &amp;#34;w&amp;#34; | &amp;#34;x&amp;#34; | &amp;#34;y&amp;#34; | &amp;#34;z&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;_&amp;#34; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>oct = &amp;#34;0&amp;#34; | &amp;#34;1&amp;#34; | &amp;#34;2&amp;#34; | &amp;#34;3&amp;#34; | &amp;#34;4&amp;#34; | &amp;#34;5&amp;#34; | &amp;#34;6&amp;#34; | &amp;#34;7&amp;#34; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dec = &amp;#34;0&amp;#34; | &amp;#34;1&amp;#34; | &amp;#34;2&amp;#34; | &amp;#34;3&amp;#34; | &amp;#34;4&amp;#34; | &amp;#34;5&amp;#34; | &amp;#34;6&amp;#34; | &amp;#34;7&amp;#34; | &amp;#34;8&amp;#34; | &amp;#34;9&amp;#34; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hex = &amp;#34;0&amp;#34; | &amp;#34;1&amp;#34; | &amp;#34;2&amp;#34; | &amp;#34;3&amp;#34; | &amp;#34;4&amp;#34; | &amp;#34;5&amp;#34; | &amp;#34;6&amp;#34; | &amp;#34;7&amp;#34; | &amp;#34;8&amp;#34; | &amp;#34;9&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;A&amp;#34; | &amp;#34;B&amp;#34; | &amp;#34;C&amp;#34; | &amp;#34;D&amp;#34; | &amp;#34;E&amp;#34; | &amp;#34;F&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;a&amp;#34; | &amp;#34;b&amp;#34; | &amp;#34;c&amp;#34; | &amp;#34;d&amp;#34; | &amp;#34;e&amp;#34; | &amp;#34;f&amp;#34; ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="whitespace">Whitespace and Comments&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>COMMENT = &amp;#34;#&amp;#34;, { char - newline }, [ newline ] ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WHITESPACE = &amp;#34; &amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | newline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ? ASCII #9 (horizontal tab) ?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ? ASCII #11 (vertical tab) ?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ? ASCII #12 (form feed) ?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ? ASCII #13 (carriage return) ? ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="identifiers">Identifiers&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>IDENT = letter, { letter | dec } ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="numeric">Numeric Literals&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>dec_lit = &amp;#34;0&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ( dec - &amp;#34;0&amp;#34; ), { dec } ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>float_lit = &amp;#34;.&amp;#34;, dec, { dec }, [ exp ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | dec_lit, &amp;#34;.&amp;#34;, { dec }, [ exp ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | dec_lit, exp ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exp = ( &amp;#34;E&amp;#34; | &amp;#34;e&amp;#34; ), [ &amp;#34;+&amp;#34; | &amp;#34;-&amp;#34; ], dec, { dec } ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DEC_INT = dec_lit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OCT_INT = &amp;#34;0&amp;#34;, oct, { oct } ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HEX_INT = &amp;#34;0&amp;#34;, ( &amp;#34;X&amp;#34; | &amp;#34;x&amp;#34; ), hex, { hex } ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FLOAT = float_lit, [ &amp;#34;F&amp;#34; | &amp;#34;f&amp;#34; ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | dec_lit, ( &amp;#34;F&amp;#34; | &amp;#34;f&amp;#34; ) ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Decimal integers can be cast as floating-point values by using the &lt;code>F&lt;/code> and &lt;code>f&lt;/code>
suffixes. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>foo: 10 # This is an integer value.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo: 10f # This is a floating-point value.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo: 1.0f # Also optional for floating-point literals.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="string">String Literals&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>STRING = single_string | double_string ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>single_string = &amp;#34;&amp;#39;&amp;#34;, { escape | char - &amp;#34;&amp;#39;&amp;#34; - newline - &amp;#34;\&amp;#34; }, &amp;#34;&amp;#39;&amp;#34; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>double_string = &amp;#39;&amp;#34;&amp;#39;, { escape | char - &amp;#39;&amp;#34;&amp;#39; - newline - &amp;#34;\&amp;#34; }, &amp;#39;&amp;#34;&amp;#39; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>escape = &amp;#34;\a&amp;#34; (* ASCII #7 (bell) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\b&amp;#34; (* ASCII #8 (backspace) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\f&amp;#34; (* ASCII #12 (form feed) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\n&amp;#34; (* ASCII #10 (line feed) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\r&amp;#34; (* ASCII #13 (carriage return) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\t&amp;#34; (* ASCII #9 (horizontal tab) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\v&amp;#34; (* ASCII #11 (vertical tab) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\?&amp;#34; (* ASCII #63 (question mark) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\\&amp;#34; (* ASCII #92 (backslash) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\&amp;#39;&amp;#34; (* ASCII #39 (apostrophe) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#39;\&amp;#34;&amp;#39; (* ASCII #34 (quote) *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\&amp;#34;, oct, [ oct, [ oct ] ] (* octal escaped byte value *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\x&amp;#34;, hex, [ hex ] (* hexadecimal escaped byte value *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\u&amp;#34;, hex, hex, hex, hex (* Unicode code point up to 0xffff *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\U000&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hex, hex, hex, hex, hex (* Unicode code point up to 0xfffff *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &amp;#34;\U0010&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hex, hex, hex, hex ; (* Unicode code point between 0x100000 and 0x10ffff *)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Octal escape sequences consume up to three octal digits. Additional digits are
passed through without escaping. For example, when unescaping the input &lt;code>\1234&lt;/code>,
the parser consumes three octal digits (123) to unescape the byte value 0x83
(ASCII &amp;lsquo;S&amp;rsquo;) and the subsequent &amp;lsquo;4&amp;rsquo; passes through as the byte value 0x34 (ASCII
&amp;lsquo;4&amp;rsquo;). To ensure correct parsing, express octal escape sequences with 3 octal
digits, using leading zeros as needed, such as: &lt;code>\000&lt;/code>, &lt;code>\001&lt;/code>, &lt;code>\063&lt;/code>, &lt;code>\377&lt;/code>.
Fewer than three digits are consumed when a non-numeric character follows the
numeric characters, such as &lt;code>\5Hello&lt;/code>.&lt;/p>
&lt;p>Hexadecimal escape sequences consume up to two hexadecimal digits. For example,
when unescaping &lt;code>\x213&lt;/code>, the parser consumes only the first two digits (21) to
unescape the byte value 0x21 (ASCII &amp;lsquo;!&amp;rsquo;). To ensure correct parsing, express
hexadecimal escape sequences with 2 hexadecimal digits, using leading zeros as
needed, such as: &lt;code>\x00&lt;/code>, &lt;code>\x01&lt;/code>, &lt;code>\xFF&lt;/code>. Fewer than two digits are consumed when
a non-hexadecimal character follows the numeric character, such as &lt;code>\xFHello&lt;/code> or
&lt;code>\x3world&lt;/code>.&lt;/p>
&lt;p>Use byte-wise escaping only for fields with type &lt;code>bytes&lt;/code>. While it is possible
to use byte-wise escaping in fields with type &lt;code>string&lt;/code>, those escape sequences
are required to form valid UTF-8 sequences. Using byte-wise escaping to express
UTF-8 sequences is error-prone. Prefer unicode escape sequences for unprintable
characters and line-breaking characters in literals for &lt;code>string&lt;/code>-type fields.&lt;/p>
&lt;p>Longer strings can be broken into several quoted strings on successive lines.
For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">quote&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;When we got into office, the thing that surprised me most was to find &amp;#34;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;that things were just as bad as we&amp;#39;d been saying they were.\n\n&amp;#34;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34; -- John F. Kennedy&amp;#34;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unicode code points are interpreted per
&lt;a href="https://www.unicode.org/versions/Unicode13.0.0/appA.pdf#page=5">Unicode 13 Table A-1 Extended BNF&lt;/a>
and are encoded as UTF-8.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
The
C++ implementation currently interprets escaped high-surrogate code points as
UTF-16 code units, and expects a &lt;code>\uHHHH&lt;/code> low-surrogate code point to
immediately follow, without any split across separate quoted strings. In
addition, unpaired surrogates will be rendered directly into also-invalid UTF-8.
These are both non-conforming behaviors[^surrogates] and should not be relied
on.
&lt;/div>
&lt;h2 id="syntax">Syntax Elements&lt;/h2>
&lt;h3 id="message">Message&lt;/h3>
&lt;p>A message is a collection of fields. A text format file is a single Message.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>Message = { Field } ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="literals">Literals&lt;/h3>
&lt;p>Field literal values can be numbers, strings, or identifiers such as &lt;code>true&lt;/code> or
enum values.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>String = STRING, { STRING } ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Float = [ &amp;#34;-&amp;#34; ], FLOAT ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Identifier = IDENT ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SignedIdentifier = &amp;#34;-&amp;#34;, IDENT ; (* For example, &amp;#34;-inf&amp;#34; *)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DecSignedInteger = &amp;#34;-&amp;#34;, DEC_INT ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OctSignedInteger = &amp;#34;-&amp;#34;, OCT_INT ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HexSignedInteger = &amp;#34;-&amp;#34;, HEX_INT ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DecUnsignedInteger = DEC_INT ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OctUnsignedInteger = OCT_INT ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HexUnsignedInteger = HEX_INT ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A single string value can comprise multiple quoted parts separated by optional
whitespace. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>a_string: &amp;#34;first part&amp;#34; &amp;#39;second part&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;third part&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>no_whitespace: &amp;#34;first&amp;#34;&amp;#34;second&amp;#34;&amp;#39;third&amp;#39;&amp;#39;fourth&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="field-names">Field Names&lt;/h3>
&lt;p>Fields that are part of the containing message use simple &lt;code>Identifiers&lt;/code> as
names.
&lt;a href="https://protobuf.dev/programming-guides/proto#extensions">&lt;code>Extension&lt;/code>&lt;/a> and
&lt;a href="https://protobuf.dev/programming-guides/proto3/#any">&lt;code>Any&lt;/code>&lt;/a> field names are
wrapped in square brackets and fully-qualified. &lt;code>Any&lt;/code> field names are prefixed
with a qualifying domain name, such as &lt;code>type.googleapis.com/&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>FieldName = ExtensionName | AnyName | IDENT ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExtensionName = &amp;#34;[&amp;#34;, TypeName, &amp;#34;]&amp;#34; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AnyName = &amp;#34;[&amp;#34;, Domain, &amp;#34;/&amp;#34;, TypeName, &amp;#34;]&amp;#34; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TypeName = IDENT, { &amp;#34;.&amp;#34;, IDENT } ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain = IDENT, { &amp;#34;.&amp;#34;, IDENT } ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Regular fields and extension fields can have scalar or message values. &lt;code>Any&lt;/code>
fields are always messages. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>reg_scalar: 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reg_message { foo: &amp;#34;bar&amp;#34; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[com.foo.ext.scalar]â€‹: 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[com.foo.ext.message] { foo: &amp;#34;bar&amp;#34; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>any_value {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [type.googleapis.com/com.foo.any] { foo: &amp;#34;bar&amp;#34; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="unknown-fields">Unknown Fields&lt;/h4>
&lt;p>Text format parsers cannot support unknown fields represented as raw field
numbers in place of field names because three of the six wire types are
represented in the same way in textformat. Some text-format serializer
implementations encode unknown fields with a format that uses a field number and
a numeric representation of the value, but this is inherently lossy because the
wire-type information is ignored. For comparison, wire-format is non-lossy
because it includes the wire-type in each field tag as &lt;code>(field_number &amp;lt;&amp;lt; 3) | wire_type&lt;/code>. For more information on encoding, see the
&lt;a href="https://protobuf.dev/programming-guides/encoding/">Encoding&lt;/a> topic.&lt;/p>
&lt;p>Without information about the field type from the message schema, the value
cannot be correctly encoded into a wire-format proto message.&lt;/p>
&lt;h3 id="fields">Fields&lt;/h3>
&lt;p>Field values can be literals (strings, numbers, or identifiers), or nested
messages.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>Field = ScalarField | MessageField ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MessageField = FieldName, [ &amp;#34;:&amp;#34; ], ( MessageValue | MessageList ) [ &amp;#34;;&amp;#34; | &amp;#34;,&amp;#34; ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ScalarField = FieldName, &amp;#34;:&amp;#34;, ( ScalarValue | ScalarList ) [ &amp;#34;;&amp;#34; | &amp;#34;,&amp;#34; ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MessageList = &amp;#34;[&amp;#34;, [ MessageValue, { &amp;#34;,&amp;#34;, MessageValue } ], &amp;#34;]&amp;#34; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ScalarList = &amp;#34;[&amp;#34;, [ ScalarValue, { &amp;#34;,&amp;#34;, ScalarValue } ], &amp;#34;]&amp;#34; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MessageValue = &amp;#34;{&amp;#34;, Message, &amp;#34;}&amp;#34; | &amp;#34;&amp;lt;&amp;#34;, Message, &amp;#34;&amp;gt;&amp;#34; ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ScalarValue = String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | Float
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | Identifier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | SignedIdentifier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | DecSignedInteger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | OctSignedInteger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | HexSignedInteger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | DecUnsignedInteger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | OctUnsignedInteger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | HexUnsignedInteger ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>:&lt;/code> delimiter between the field name and value is required for scalar fields
but optional for message fields (including lists). Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>scalar: 10 # Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scalar 10 # Invalid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scalars: [1, 2, 3] # Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scalars [1, 2, 3] # Invalid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message: {} # Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message {} # Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>messages: [{}, {}] # Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>messages [{}, {}] # Valid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Values of message fields can be surrounded by curly brackets
or angle brackets:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>message: { foo: &amp;#34;bar&amp;#34; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message: &amp;lt; foo: &amp;#34;bar&amp;#34; &amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Fields marked &lt;code>repeated&lt;/code> can have multiple values specified by repeating the
field, using the special &lt;code>[]&lt;/code> list syntax, or some combination of both. The
order of values is maintained. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>repeated_field: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repeated_field: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repeated_field: [3, 4, 5]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repeated_field: 6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repeated_field: [7, 8, 9]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Non-&lt;code>repeated&lt;/code> fields cannot use the list syntax. For example, &lt;code>[0]&lt;/code> is not
valid for &lt;code>optional&lt;/code> or &lt;code>required&lt;/code> fields. Fields marked &lt;code>optional&lt;/code> can be
omitted or specified once. Fields marked &lt;code>required&lt;/code> must be specified exactly
once.&lt;/p>
&lt;p>Fields not specified in the associated &lt;em>.proto&lt;/em> message are not allowed unless
the field name is present in the message&amp;rsquo;s &lt;code>reserved&lt;/code> field list. &lt;code>reserved&lt;/code>
fields, if present in any form (scalar, list, message), are simply ignored by
text format.&lt;/p>
&lt;h2 id="value">Value Types&lt;/h2>
&lt;p>When a field&amp;rsquo;s associated &lt;em>.proto&lt;/em> value type is known, the following value
descriptions and constraints apply. For the purposes of this section, we declare
the following container elements:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>signedInteger = DecSignedInteger | OctSignedInteger | HexSignedInteger ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unsignedInteger = DecUnsignedInteger | OctUnsignedInteger | HexUnsignedInteger ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>integer = signedInteger | unsignedInteger ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>.proto Type&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>Values&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">
&lt;code>float&lt;/code>, &lt;code>double&lt;/code>
&lt;/td>
&lt;td style="text-align:left">
A &lt;code>Float&lt;/code>, &lt;code>DecSignedInteger&lt;/code>, or
&lt;code>DecUnsignedInteger&lt;/code> element, or an &lt;code>Identifier&lt;/code>
or &lt;code>SignedIdentifier&lt;/code> element whose &lt;code>IDENT&lt;/code>
portion is equal to &lt;em>"inf"&lt;/em>, &lt;em>"infinity"&lt;/em>, or
&lt;em>"nan"&lt;/em> (case-insensitive). Overflows are treated as infinity or
-infinity. Octal and hexadecimal values are not valid.
&lt;p>
Note: &lt;em>"nan"&lt;/em> should be interpreted as &lt;a href="https://en.wikipedia.org/wiki/NaN#Quiet_NaN">Quiet NaN&lt;/a>
&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">
&lt;code>int32&lt;/code>, &lt;code>sint32&lt;/code>, &lt;code>sfixed32&lt;/code>
&lt;/td>
&lt;td style="text-align:left">
Any of the &lt;code>integer&lt;/code> elements in the range
&lt;em>-0x80000000&lt;/em> to &lt;em>0x7FFFFFFF&lt;/em>.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">
&lt;code>int64&lt;/code>, &lt;code>sint64&lt;/code>, &lt;code>sfixed64&lt;/code>
&lt;/td>
&lt;td style="text-align:left">
Any of the &lt;code>integer&lt;/code> elements in the range
&lt;em>-0x8000000000000000&lt;/em> to &lt;em>0x7FFFFFFFFFFFFFFF&lt;/em>.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">
&lt;code>uint32&lt;/code>, &lt;code>fixed32&lt;/code>
&lt;/td>
&lt;td style="text-align:left">
Any of the &lt;code>unsignedInteger&lt;/code> elements in the range
&lt;em>0&lt;/em> to &lt;em>0xFFFFFFFF&lt;/em>. Note that signed values
(&lt;em>-0&lt;/em>) are not valid.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">
&lt;code>uint64&lt;/code>, &lt;code>fixed64&lt;/code>
&lt;/td>
&lt;td style="text-align:left">
Any of the &lt;code>unsignedInteger&lt;/code> elements in the range
&lt;em>0&lt;/em> to &lt;em>0xFFFFFFFFFFFFFFFF&lt;/em>. Note that signed
values (&lt;em>-0&lt;/em>) are not valid.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">
&lt;code>string&lt;/code>
&lt;/td>
&lt;td style="text-align:left">
A &lt;code>String&lt;/code> element containing valid UTF-8 data. Any escape
sequences must form valid UTF-8 byte sequences when unescaped.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">
&lt;code>bytes&lt;/code>
&lt;/td>
&lt;td style="text-align:left">
A &lt;code>String&lt;/code> element, possibly including invalid UTF-8 escape
sequences.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">
&lt;code>bool&lt;/code>
&lt;/td>
&lt;td style="text-align:left">
An &lt;code>Identifier&lt;/code> element or any of the
&lt;code>unsignedInteger&lt;/code> elements matching one of the following
values.&lt;br/>
&lt;strong>True values:&lt;/strong> &lt;em>"True"&lt;/em>, &lt;em>"true"&lt;/em>,
&lt;em>"t"&lt;/em>, &lt;em>1&lt;/em>&lt;br/>
&lt;strong>False values:&lt;/strong> &lt;em>"False"&lt;/em>, &lt;em>"false"&lt;/em>,
&lt;em>"f"&lt;/em>, &lt;em>0&lt;/em>&lt;br/>
Any unsigned integer representation of &lt;em>0&lt;/em> or &lt;em>1&lt;/em>
is permitted: &lt;em>00&lt;/em>, &lt;em>0x0&lt;/em>, &lt;em>01&lt;/em>,
&lt;em>0x1&lt;/em>, etc.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">
&lt;em>enum values&lt;/em>
&lt;/td>
&lt;td style="text-align:left">
An &lt;code>Identifier&lt;/code> element containing an enum value name, or any
of the &lt;code>integer&lt;/code> elements in the range
&lt;em>-0x80000000&lt;/em> to &lt;em>0x7FFFFFFF&lt;/em> containing an enum
value number. It is not valid to specify a name that is not a
member of the field's &lt;code>enum&lt;/code> type definition. Depending on
the particular protobuf runtime implementation, it may or may not be
valid to specify a number that is not a member of the field's
&lt;code>enum&lt;/code> type definition. Text format processors not tied to a
particular runtime implementation (such as IDE support) may choose to
issue a warning when a provided number value is not a valid member. Note
that certain names that are valid keywords in other contexts, such as
&lt;em>"true"&lt;/em> or &lt;em>"infinity"&lt;/em>, are also valid enum value names.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">
&lt;em>message values&lt;/em>
&lt;/td>
&lt;td style="text-align:left">
A &lt;code>MessageValue&lt;/code> element.
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="extension">Extension Fields&lt;/h2>
&lt;p>Extension fields are specified using their qualified names. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>local_field: 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[com.example.ext_field]â€‹: 20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extension fields are generally defined in other &lt;em>.proto&lt;/em> files. The text format
language does not provide a mechanism for specifying the locations of files that
define extension fields; instead, the parser must have prior knowledge of their
locations.&lt;/p>
&lt;h2 id="any">&lt;code>Any&lt;/code> Fields&lt;/h2>
&lt;p>Text format supports an expanded form of the
&lt;a href="https://protobuf.dev/programming-guides/proto3/#any">&lt;code>google.protobuf.Any&lt;/code>&lt;/a>
well-known type using a special syntax resembling extension fields. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>local_field: 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># An Any value using regular fields.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>any_value {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type_url: &amp;#34;type.googleapis.com/com.example.SomeType&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value: &amp;#34;\x0a\x05hello&amp;#34; # serialized bytes of com.example.SomeType
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># The same value using Any expansion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>any_value {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [type.googleapis.com/com.example.SomeType] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> field1: &amp;#34;hello&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, &lt;code>any_value&lt;/code> is a field of type &lt;code>google.protobuf.Any&lt;/code>, and it
stores a serialized &lt;code>com.example.SomeType&lt;/code> message containing &lt;code>field1: hello&lt;/code>.&lt;/p>
&lt;h2 id="group">&lt;code>group&lt;/code> Fields&lt;/h2>
&lt;p>In text format, a &lt;code>group&lt;/code> field uses a normal &lt;code>MessageValue&lt;/code> element as its
value, but is specified using the capitalized group name rather than the
implicit lowercased field name. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">MessageWithGroup&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">group&lt;/span> &lt;span style="color:#000">MyGroup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">my_value&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the above &lt;em>.proto&lt;/em> definition, the following text format is a valid
&lt;code>MessageWithGroup&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>MyGroup {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> my_value: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similar to Message fields, the &lt;code>:&lt;/code> delimiter between the group name and value is
optional.&lt;/p>
&lt;h2 id="map">&lt;code>map&lt;/code> Fields&lt;/h2>
&lt;p>Text format does not provide a custom syntax for specifying map field entries.
When a &lt;a href="https://protobuf.dev/programming-guides/proto#maps">&lt;code>map&lt;/code>&lt;/a> field is
defined in a &lt;em>.proto&lt;/em> file, an implicit &lt;code>Entry&lt;/code> message is defined containing
&lt;code>key&lt;/code> and &lt;code>value&lt;/code> fields. Map fields are always repeated, accepting multiple
key/value entries. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">MessageWithMap&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">my_map&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the above &lt;em>.proto&lt;/em> definition, the following text format is a valid
&lt;code>MessageWithMap&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>my_map { key: &amp;#34;entry1&amp;#34; value: 1 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_map { key: &amp;#34;entry2&amp;#34; value: 2 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># You can also use the list syntax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>my_map: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { key: &amp;#34;entry3&amp;#34; value: 3 },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { key: &amp;#34;entry4&amp;#34; value: 4 }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Both the &lt;code>key&lt;/code> and &lt;code>value&lt;/code> fields are optional and default to the zero value of
their respective types if unspecified. If a key is duplicated, only the
last-specified value will be retained in a parsed map.&lt;/p>
&lt;p>The order of maps is not maintained in textprotos.&lt;/p>
&lt;h2 id="oneof">&lt;code>oneof&lt;/code> Fields&lt;/h2>
&lt;p>While there is no special syntax related to &lt;code>oneof&lt;/code> fields in text format, only
one &lt;code>oneof&lt;/code> member may be specified at a time. Specifying multiple members
concurrently is not valid. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">OneofExample&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">MessageWithOneof&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">not_part_of_oneof&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">Example&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">first_oneof_field&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">second_oneof_field&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#000">MessageWithOneof&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above &lt;em>.proto&lt;/em> definition results in the following text format behavior:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span># Valid: only one field from the Example oneof is set.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> not_part_of_oneof: &amp;#34;always valid&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> first_oneof_field: &amp;#34;valid by itself&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># Valid: the other oneof field is set.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> not_part_of_oneof: &amp;#34;always valid&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> second_oneof_field: &amp;#34;valid by itself&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># Invalid: multiple fields from the Example oneof are set.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> not_part_of_oneof: &amp;#34;always valid&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> first_oneof_field: &amp;#34;not valid&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> second_oneof_field: &amp;#34;not valid&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="text-format-files">Text Format Files&lt;/h2>
&lt;p>A text format file uses the &lt;code>.txtpb&lt;/code> filename suffix and contains a single
&lt;code>Message&lt;/code>. Text format files are UTF-8 encoded. An example textproto file is
provided below.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Important&lt;/h4>
&lt;code>.txtpb&lt;/code> is the canonical text format file extension and should be preferred to
the alternatives. This suffix is preferred for its brevity and consistency with
the official wire-format file extension &lt;code>.binpb&lt;/code>. The legacy canonical extension
&lt;code>.textproto&lt;/code> still has widespread usage and tooling
support. Some tooling also
supports the legacy extensions &lt;code>.textpb&lt;/code> and &lt;code>.pbtxt&lt;/code>. All other extensions
besides the above are &lt;strong>strongly&lt;/strong> discouraged; in particular, extensions such
as &lt;code>.protoascii&lt;/code> wrongly imply that text format is ascii-only, and others like
&lt;code>.pb.txt&lt;/code> are not recognized by common tooling.
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span># This is an example of Protocol Buffer&amp;#39;s text format.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># Unlike .proto files, only shell-style line comments are supported.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name: &amp;#34;John Smith&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pet {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: DOG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;#34;Fluffy&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tail_wagginess: 0.65f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pet &amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: LIZARD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;#34;Lizzy&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> legs: 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string_value_with_escape: &amp;#34;valid \n escape&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repeated_values: [ &amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;three&amp;#34; ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="header">Header&lt;/h3>
&lt;p>The header comments &lt;code>proto-file&lt;/code> and &lt;code>proto-message&lt;/code> inform developer tools of
the schema, so they may provide various features.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span># proto-file: some/proto/my_file.proto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># proto-message: MyMessage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="working-with-the-format-programmatically">Working with the Format Programmatically&lt;/h2>
&lt;p>Due to how individual Protocol Buffer implementations emit
neither a consistent nor canonical text format,
tools or libraries that modify TextProto files or emit TextProto output must
explicitly use
&lt;a href="https://github.com/protocolbuffers/txtpbfmt">https://github.com/protocolbuffers/txtpbfmt&lt;/a>
to format their output.&lt;/p></description></item><item><title>Reference: Protocol Buffers Well-Known Types</title><link>https://protobuf.dev/reference/protobuf/google.protobuf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/reference/protobuf/google.protobuf/</guid><description>
&lt;h2 id="index">Index&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#any">&lt;code>Any&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#api">&lt;code>Api&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#bool-value">&lt;code>BoolValue&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#bytes-value">&lt;code>BytesValue&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#double-value">&lt;code>DoubleValue&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#duration">&lt;code>Duration&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#empty">&lt;code>Empty&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#enum">&lt;code>Enum&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#enum-value">&lt;code>EnumValue&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#field">&lt;code>Field&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#field-cardinality">&lt;code>Field.Cardinality&lt;/code>&lt;/a> (enum)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#field-kind">&lt;code>Field.Kind&lt;/code>&lt;/a> (enum)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#field-mask">&lt;code>FieldMask&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#float-value">&lt;code>FloatValue&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#int32-value">&lt;code>Int32Value&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#int64-value">&lt;code>Int64Value&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#list-value">&lt;code>ListValue&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#method">&lt;code>Method&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#mixin">&lt;code>Mixin&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#null-value">&lt;code>NullValue&lt;/code>&lt;/a> (enum)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#option">&lt;code>Option&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#source-context">&lt;code>SourceContext&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#string-value">&lt;code>StringValue&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#struct">&lt;code>Struct&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#syntax">&lt;code>Syntax&lt;/code>&lt;/a> (enum)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#timestamp">&lt;code>Timestamp&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#type">&lt;code>Type&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#uint32-value">&lt;code>UInt32Value&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#uint64-value">&lt;code>UInt64Value&lt;/code>&lt;/a> (message)&lt;/li>
&lt;li>&lt;a href="https://protobuf.dev/reference/protobuf/google.protobuf/#value">&lt;code>Value&lt;/code>&lt;/a> (message)&lt;/li>
&lt;/ul>
&lt;h2 id="any">Any&lt;/h2>
&lt;p>&lt;code>Any&lt;/code> contains an arbitrary serialized message along with a URL that describes
the type of the serialized message.&lt;/p>
&lt;h4 id="json">JSON&lt;/h4>
&lt;p>The JSON representation of an &lt;code>Any&lt;/code> value uses the regular representation of the
deserialized, embedded message, with an additional field &lt;code>@type&lt;/code> which contains
the type URL. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">profile&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Person&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">first_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">last_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;type.googleapis.com/google.profile.Person&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;firstName&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;lastName&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#a40000">&amp;lt;string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the embedded message type is well-known and has a custom JSON representation,
that representation will be embedded adding a field &lt;code>value&lt;/code> which holds the
custom JSON in addition to the &lt;code>@type&lt;/code> field. Example (for message
&lt;code>google.protobuf.Duration&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;@type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;type.googleapis.com/google.protobuf.Duration&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;value&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;1.212s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table id="google.protobuf.Any.FIELDS">
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>type_url&lt;/code>&lt;/td>
&lt;td>&lt;code class="apitype">string&lt;/code>&lt;/td>
&lt;td>&lt;p>A URL/resource name whose content describes the type of the serialized message.&lt;/p>&lt;p>For URLs which use the schema &lt;code>http&lt;/code>, &lt;code>https&lt;/code>, or no schema, the following restrictions and interpretations apply:&lt;/p>
&lt;ul>
&lt;li>If no schema is provided, &lt;code>https&lt;/code> is assumed.&lt;/li>
&lt;li>The last segment of the URL's path must represent the fully qualified name of the type (as in &lt;code>path/google.protobuf.Duration&lt;/code>).&lt;/li>
&lt;li>An HTTP GET on the URL must yield a &lt;code>&lt;a href="#type">google.protobuf.Type&lt;/a>&lt;/code> value in binary format, or produce an error.&lt;/li>
&lt;li>Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)&lt;/li>
&lt;/ul>&lt;p>Schemas other than &lt;code>http&lt;/code>, &lt;code>https&lt;/code> (or the empty schema) might be used with implementation specific semantics.&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code class="apitype">bytes&lt;/code>&lt;/td>
&lt;td>Must be valid serialized data of the above specified type.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="api">Api&lt;/h2>
&lt;p>Api is a light-weight descriptor for a protocol buffer service.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>
The fully qualified name of this api, including package name followed by
the api's simple name.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>methods&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#method">Method&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The methods of this api, in unspecified order.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>options&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#option">Option&lt;/a>&lt;/code>
&lt;/td>
&lt;td>Any metadata attached to the API.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>version&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>
&lt;p>
A version string for this api. If specified, must have the form
&lt;code>major-version.minor-version&lt;/code>, as in &lt;code>1.10&lt;/code>. If
the minor version is omitted, it defaults to zero. If the entire
version field is empty, the major version is derived from the package
name, as outlined below. If the field is not empty, the version in the
package name will be verified to be consistent with what is provided
here.
&lt;/p>
&lt;p>
The versioning schema uses
&lt;a href="http://semver.org">semantic versioning&lt;/a> where the major
version number indicates a breaking change and the minor version an
additive, non-breaking change. Both version numbers are signals to
users what to expect from different versions, and should be carefully
chosen based on the product plan.
&lt;/p>
&lt;p>
The major version is also reflected in the package name of the API,
which must end in &lt;code>v&amp;lt;major-version&amp;gt;&lt;/code>, as in
&lt;code>google.feature.v1&lt;/code>. For major versions 0 and 1, the suffix
can be omitted. Zero major versions must only be used for
experimental, none-GA apis.
&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>source_context&lt;/code>&lt;/td>
&lt;td>
&lt;code
>&lt;code
>&lt;a href="#source-context">SourceContext&lt;/a>&lt;/code
>&lt;/code
>
&lt;/td>
&lt;td>
Source context for the protocol buffer service represented by this
message.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mixins&lt;/code>&lt;/td>
&lt;td>
&lt;code
>&lt;code>&lt;a href="#mixin">Mixin&lt;/a>&lt;/code>&lt;/code
>
&lt;/td>
&lt;td>
Included APIs. See
&lt;code>&lt;a href="#mixin">Mixin&lt;/a>&lt;/code>.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>syntax&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#syntax">Syntax&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The source syntax of the service.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="bool-value">BoolValue&lt;/h2>
&lt;p>Wrapper message for &lt;code>bool&lt;/code>.&lt;/p>
&lt;p>The JSON representation for &lt;code>BoolValue&lt;/code> is JSON &lt;code>true&lt;/code> and &lt;code>false&lt;/code>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code class="apitype">bool&lt;/code>&lt;/td>
&lt;td>The bool value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="bytes-value">BytesValue&lt;/h2>
&lt;p>Wrapper message for &lt;code>bytes&lt;/code>.&lt;/p>
&lt;p>The JSON representation for &lt;code>BytesValue&lt;/code> is JSON string.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code>bytes&lt;/code>&lt;/td>
&lt;td>The bytes value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="double-value">DoubleValue&lt;/h2>
&lt;p>Wrapper message for &lt;code>double&lt;/code>.&lt;/p>
&lt;p>The JSON representation for &lt;code>DoubleValue&lt;/code> is JSON number.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code>double&lt;/code>&lt;/td>
&lt;td>The double value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="duration">Duration&lt;/h2>
&lt;p>A Duration represents a signed, fixed-length span of time represented as a count
of seconds and fractions of seconds at nanosecond resolution. It is independent
of any calendar and concepts like &amp;quot;day&amp;quot; or &amp;quot;month&amp;quot;. It is related to
Timestamp in that the difference between two Timestamp values is a Duration and
it can be added or subtracted from a Timestamp. Range is approximately +-10,000
years.&lt;/p>
&lt;p>Example 1: Compute Duration from two Timestamps in pseudo code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Timestamp&lt;/span> &lt;span style="color:#000">start&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Timestamp&lt;/span> &lt;span style="color:#000">end&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Duration&lt;/span> &lt;span style="color:#000">duration&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000000000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000000000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Timestamp&lt;/span> &lt;span style="color:#000">start&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Duration&lt;/span> &lt;span style="color:#000">duration&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Timestamp&lt;/span> &lt;span style="color:#000">end&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">duration&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000000000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000000000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000000000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The JSON representation for &lt;code>Duration&lt;/code> is a &lt;code>String&lt;/code> that ends in &lt;code>s&lt;/code> to
indicate seconds and is preceded by the number of seconds, with nanoseconds
expressed as fractional seconds.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>seconds&lt;/code>&lt;/td>
&lt;td>&lt;code>int64&lt;/code>&lt;/td>
&lt;td>
Signed seconds of the span of time. Must be from -315,576,000,000 to
+315,576,000,000 inclusive.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>nanos&lt;/code>&lt;/td>
&lt;td>&lt;code>int32&lt;/code>&lt;/td>
&lt;td>
Signed fractions of a second at nanosecond resolution of the span of
time. Durations less than one second are represented with a 0
&lt;code>seconds&lt;/code> field and a positive or negative
&lt;code>nanos&lt;/code> field. For durations of one second or more, a
non-zero value for the &lt;code>nanos&lt;/code> field must be of the same sign
as the &lt;code>seconds&lt;/code> field. Must be from -999,999,999 to
+999,999,999 inclusive.
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="empty">Empty&lt;/h2>
&lt;p>A generic empty message that you can re-use to avoid defining duplicated empty
messages in your APIs. A typical example is to use it as the request or the
response type of an API method. For instance:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rpc&lt;/span> &lt;span style="color:#000">Bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">google.protobuf.Empty&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">returns&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">google.protobuf.Empty&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The JSON representation for &lt;code>Empty&lt;/code> is empty JSON object &lt;code>{}&lt;/code>.&lt;/p>
&lt;h2 id="enum">Enum&lt;/h2>
&lt;p>Enum type definition&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>Enum type name.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>enumvalue&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#enum-value">EnumValue&lt;/a>&lt;/code>
&lt;/td>
&lt;td>Enum value definitions.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>options&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#option">Option&lt;/a>&lt;/code>
&lt;/td>
&lt;td>Protocol buffer options.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>source_context&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#source-context">SourceContext&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The source context.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>syntax&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#syntax">Syntax&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The source syntax.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="enum-value">EnumValue&lt;/h2>
&lt;p>Enum value definition.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>Enum value name.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>number&lt;/code>&lt;/td>
&lt;td>&lt;code>int32&lt;/code>&lt;/td>
&lt;td>Enum value number.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>options&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#option">Option&lt;/a>&lt;/code>
&lt;/td>
&lt;td>Protocol buffer options.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="field">Field&lt;/h2>
&lt;p>A single field of a message type.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>kind&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#field-kind">Kind&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The field type.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>cardinality&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#field-cardinality">Cardinality&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The field cardinality.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>number&lt;/code>&lt;/td>
&lt;td>&lt;code>int32&lt;/code>&lt;/td>
&lt;td>The field number.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>The field name.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>type_url&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>
The field type URL, without the scheme, for message or enumeration
types. Example:
&lt;code>&amp;quot;type.googleapis.com/google.protobuf.Timestamp&amp;quot;&lt;/code>.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>oneof_index&lt;/code>&lt;/td>
&lt;td>&lt;code>int32&lt;/code>&lt;/td>
&lt;td>
The index of the field type in &lt;code>Type.oneofs&lt;/code>, for message or
enumeration types. The first type has index 1; zero means the type is
not in the list.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>packed&lt;/code>&lt;/td>
&lt;td>&lt;code>bool&lt;/code>&lt;/td>
&lt;td>Whether to use alternative packed wire representation.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>options&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#option">Option&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The protocol buffer options.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>json_name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>The field JSON name.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>default_value&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>
The string value of the default value of this field. Proto2 syntax only.
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="field-cardinality">Cardinality&lt;/h2>
&lt;p>Whether a field is optional, required, or repeated.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Enum value&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>CARDINALITY_UNKNOWN&lt;/code>&lt;/td>
&lt;td>For fields with unknown cardinality.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CARDINALITY_OPTIONAL&lt;/code>&lt;/td>
&lt;td>For optional fields.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CARDINALITY_REQUIRED&lt;/code>&lt;/td>
&lt;td>For required fields. Proto2 syntax only.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CARDINALITY_REPEATED&lt;/code>&lt;/td>
&lt;td>For repeated fields.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="field-kind">Kind&lt;/h2>
&lt;p>Basic field types.&lt;/p>
&lt;table class="matchpre">
&lt;thead>
&lt;tr>
&lt;th>Enum value&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>TYPE_UNKNOWN&lt;/code>&lt;/td>
&lt;td>Field type unknown.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_DOUBLE&lt;/code>&lt;/td>
&lt;td>Field type double.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_FLOAT&lt;/code>&lt;/td>
&lt;td>Field type float.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_INT64&lt;/code>&lt;/td>
&lt;td>Field type int64.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_UINT64&lt;/code>&lt;/td>
&lt;td>Field type uint64.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_INT32&lt;/code>&lt;/td>
&lt;td>Field type int32.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_FIXED64&lt;/code>&lt;/td>
&lt;td>Field type fixed64.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_FIXED32&lt;/code>&lt;/td>
&lt;td>Field type fixed32.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_BOOL&lt;/code>&lt;/td>
&lt;td>Field type bool.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_STRING&lt;/code>&lt;/td>
&lt;td>Field type string.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_GROUP&lt;/code>&lt;/td>
&lt;td>Field type group. Proto2 syntax only, and deprecated.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_MESSAGE&lt;/code>&lt;/td>
&lt;td>Field type message.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_BYTES&lt;/code>&lt;/td>
&lt;td>Field type bytes.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_UINT32&lt;/code>&lt;/td>
&lt;td>Field type uint32.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_ENUM&lt;/code>&lt;/td>
&lt;td>Field type enum.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_SFIXED32&lt;/code>&lt;/td>
&lt;td>Field type sfixed32.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_SFIXED64&lt;/code>&lt;/td>
&lt;td>Field type sfixed64.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_SINT32&lt;/code>&lt;/td>
&lt;td>Field type sint32.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TYPE_SINT64&lt;/code>&lt;/td>
&lt;td>Field type sint64.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="field-mask">FieldMask&lt;/h2>
&lt;p>&lt;code>FieldMask&lt;/code> represents a set of symbolic field paths, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">paths&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;f.a&amp;#34;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000">paths&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;f.b.d&amp;#34;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here &lt;code>f&lt;/code> represents a field in some root message, &lt;code>a&lt;/code> and &lt;code>b&lt;/code> fields in the
message found in &lt;code>f&lt;/code>, and &lt;code>d&lt;/code> a field found in the message in &lt;code>f.b&lt;/code>.&lt;/p>
&lt;p>Field masks are used to specify a subset of fields that should be returned by a
get operation (a &lt;em>projection&lt;/em>), or modified by an update operation. Field masks
also have a custom JSON encoding (see below).&lt;/p>
&lt;h4 id="field-masks-projections">Field Masks in Projections&lt;/h4>
&lt;p>When a &lt;code>FieldMask&lt;/code> specifies a &lt;em>projection&lt;/em>, the API will filter the response
message (or sub-message) to contain only those fields specified in the mask. For
example, consider this &amp;quot;pre-masking&amp;quot; response message:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">22&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">13&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000">z&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After applying the mask in the previous example, the API response will not
contain specific values for fields x, y, or z (their value will be set to the
default, and omitted in proto text output):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">22&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A repeated field is not allowed except at the last position of a field mask.&lt;/p>
&lt;p>If a &lt;code>FieldMask&lt;/code> object is not present in a get operation, the operation applies
to all fields (as if a FieldMask of all fields had been specified).&lt;/p>
&lt;p>Note that a field mask does not necessarily apply to the top-level response
message. In case of a REST get operation, the field mask applies directly to the
response, but in case of a REST list operation, the mask instead applies to each
individual message in the returned resource list. In case of a REST custom
method, other definitions may be used. Where the mask applies will be clearly
documented together with its declaration in the API. In any case, the effect on
the returned resource/resources is required behavior for APIs.&lt;/p>
&lt;h4 id="field-masks-updates">Field Masks in Update Operations&lt;/h4>
&lt;p>A field mask in update operations specifies which fields of the targeted
resource are going to be updated. The API is required to only change the values
of the fields as specified in the mask and leave the others untouched. If a
resource is passed in to describe the updated values, the API ignores the values
of all fields not covered by the mask.&lt;/p>
&lt;p>In order to reset a field&amp;rsquo;s value to the default, the field must be in the mask
and set to the default value in the provided resource. Hence, in order to reset
all fields of a resource, provide a default instance of the resource and set all
fields in the mask, or do not provide a mask as described below.&lt;/p>
&lt;p>If a field mask is not present on update, the operation applies to all fields
(as if a field mask of all fields has been specified). Note that in the presence
of schema evolution, this may mean that fields the client does not know and has
therefore not filled into the request will be reset to their default. If this is
unwanted behavior, a specific service may require a client to always specify a
field mask, producing an error if not.&lt;/p>
&lt;p>As with get operations, the location of the resource which describes the updated
values in the request message depends on the operation kind. In any case, the
effect of the field mask is required to be honored by the API.&lt;/p>
&lt;h5 id="http-rest">Considerations for HTTP REST&lt;/h5>
&lt;p>The HTTP kind of an update operation which uses a field mask must be set to
PATCH instead of PUT in order to satisfy HTTP semantics (PUT must only be used
for full updates).&lt;/p>
&lt;h4 id="json-encoding-field-masks">JSON Encoding of Field Masks&lt;/h4>
&lt;p>In JSON, a field mask is encoded as a single string where paths are separated by
a comma. Fields name in each path are converted to/from lower-camel naming
conventions.&lt;/p>
&lt;p>As an example, consider the following message declarations:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Profile&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">User&lt;/span> &lt;span style="color:#000">user&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">Photo&lt;/span> &lt;span style="color:#000">photo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">User&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">display_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In proto a field mask for &lt;code>Profile&lt;/code> may look as such:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mask&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">paths&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;user.display_name&amp;#34;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">paths&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;photo&amp;#34;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In JSON, the same mask is represented as below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">mask:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;user.displayName,photo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>paths&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>The set of field mask paths.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="float-value">FloatValue&lt;/h2>
&lt;p>Wrapper message for &lt;code>float&lt;/code>.&lt;/p>
&lt;p>The JSON representation for &lt;code>FloatValue&lt;/code> is JSON number.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code>float&lt;/code>&lt;/td>
&lt;td>The float value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="int32-value">Int32Value&lt;/h2>
&lt;p>Wrapper message for &lt;code>int32&lt;/code>.&lt;/p>
&lt;p>The JSON representation for &lt;code>Int32Value&lt;/code> is JSON number.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code>int32&lt;/code>&lt;/td>
&lt;td>The int32 value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="int64-value">Int64Value&lt;/h2>
&lt;p>Wrapper message for &lt;code>int64&lt;/code>.&lt;/p>
&lt;p>The JSON representation for &lt;code>Int64Value&lt;/code> is JSON string.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code>int64&lt;/code>&lt;/td>
&lt;td>The int64 value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="list-value">ListValue&lt;/h2>
&lt;p>&lt;code>ListValue&lt;/code> is a wrapper around a repeated field of values.&lt;/p>
&lt;p>The JSON representation for &lt;code>ListValue&lt;/code> is JSON array.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>values&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#value">Value&lt;/a>&lt;/code>
&lt;/td>
&lt;td>Repeated field of dynamically typed values.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="method">Method&lt;/h2>
&lt;p>Method represents a method of an api.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>The simple name of this method.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>request_type_url&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>A URL of the input message type.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>request_streaming&lt;/code>&lt;/td>
&lt;td>&lt;code>bool&lt;/code>&lt;/td>
&lt;td>If true, the request is streamed.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>response_type_url&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>The URL of the output message type.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>response_streaming&lt;/code>&lt;/td>
&lt;td>&lt;code>bool&lt;/code>&lt;/td>
&lt;td>If true, the response is streamed.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>options&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#option">Option&lt;/a>&lt;/code>
&lt;/td>
&lt;td>Any metadata attached to the method.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>syntax&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#syntax">Syntax&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The source syntax of this method.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="mixin">Mixin&lt;/h2>
&lt;p>Declares an API to be included in this API. The including API must redeclare all
the methods from the included API, but documentation and options are inherited
as follows:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If after comment and whitespace stripping, the documentation string of the
redeclared method is empty, it will be inherited from the original method.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each annotation belonging to the service config (http, visibility) which is
not set in the redeclared method will be inherited.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If an http annotation is inherited, the path pattern will be modified as
follows. Any version prefix will be replaced by the version of the including
API plus the &lt;code>root&lt;/code> path if specified.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Example of a simple mixin:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">acl.v1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span> &lt;span style="color:#000">AccessControl&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Get the underlying ACL object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rpc&lt;/span> &lt;span style="color:#000">GetAcl&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GetAclRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">returns&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Acl&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">google.api.http&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/v1/{resource=**}:getAcl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">storage.v2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span> &lt;span style="color:#000">Storage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// rpc GetAcl(GetAclRequest) returns (Acl);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Get a data record.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rpc&lt;/span> &lt;span style="color:#000">GetData&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GetDataRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">returns&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">google.api.http&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/v2/{resource=**}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example of a mixin configuration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>apis:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: google.storage.v2.Storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mixins:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: google.acl.v1.AccessControl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The mixin construct implies that all methods in &lt;code>AccessControl&lt;/code> are also
declared with same name and request/response types in &lt;code>Storage&lt;/code>. A documentation
generator or annotation processor will see the effective &lt;code>Storage.GetAcl&lt;/code> method
after inherting documentation and annotations as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span> &lt;span style="color:#000">Storage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Get the underlying ACL object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rpc&lt;/span> &lt;span style="color:#000">GetAcl&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GetAclRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">returns&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Acl&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">google.api.http&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/v2/{resource=**}:getAcl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note how the version in the path pattern changed from &lt;code>v1&lt;/code> to &lt;code>v2&lt;/code>.&lt;/p>
&lt;p>If the &lt;code>root&lt;/code> field in the mixin is specified, it should be a relative path
under which inherited HTTP paths are placed. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>apis:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: google.storage.v2.Storage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mixins:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: google.acl.v1.AccessControl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root: acls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This implies the following inherited HTTP annotation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span> &lt;span style="color:#000">Storage&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Get the underlying ACL object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rpc&lt;/span> &lt;span style="color:#000">GetAcl&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GetAclRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">returns&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Acl&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">google.api.http&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;/v2/acls/{resource=**}:getAcl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>The fully qualified name of the API which is included.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>root&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>
If non-empty specifies a path under which inherited HTTP paths are
rooted.
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="null-value">NullValue&lt;/h2>
&lt;p>&lt;code>NullValue&lt;/code> is a singleton enumeration to represent the null value for the
&lt;code>Value&lt;/code> type union.&lt;/p>
&lt;p>The JSON representation for &lt;code>NullValue&lt;/code> is JSON &lt;code>null&lt;/code>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Enum value&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>NULL_VALUE&lt;/code>&lt;/td>
&lt;td>Null value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="option">Option&lt;/h2>
&lt;p>A protocol buffer option, which can be attached to a message, field,
enumeration, etc.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>
The option's name. For example, &lt;code>&amp;quot;java_package&amp;quot;&lt;/code>.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#any">Any&lt;/a>&lt;/code>
&lt;/td>
&lt;td>
The option's value. For example,
&lt;code>&amp;quot;com.google.protobuf&amp;quot;&lt;/code>.
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="source-context">SourceContext&lt;/h2>
&lt;p>&lt;code>SourceContext&lt;/code> represents information about the source of a protobuf element,
like the file in which it is defined.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>file_name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>
The path-qualified name of the .proto file that contained the associated
protobuf element. For example:
&lt;code>&amp;quot;google/protobuf/source.proto&amp;quot;&lt;/code>.
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="string-value">StringValue&lt;/h2>
&lt;p>Wrapper message for &lt;code>string&lt;/code>.&lt;/p>
&lt;p>The JSON representation for &lt;code>StringValue&lt;/code> is JSON string.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>The string value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="struct">Struct&lt;/h2>
&lt;p>&lt;code>Struct&lt;/code> represents a structured data value, consisting of fields which map to
dynamically typed values. In some languages, &lt;code>Struct&lt;/code> might be supported by a
native representation. For example, in scripting languages like JS a struct is
represented as an object. The details of that representation are described
together with the proto support for the language.&lt;/p>
&lt;p>The JSON representation for &lt;code>Struct&lt;/code> is JSON object.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>fields&lt;/code>&lt;/td>
&lt;td>
&lt;code>map&amp;lt;string, &lt;a href="#value">Value&lt;/a>&amp;gt;&lt;/code>
&lt;/td>
&lt;td>Map of dynamically typed values.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="syntax">Syntax&lt;/h2>
&lt;p>The syntax in which a protocol buffer element is defined.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Enum value&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SYNTAX_PROTO2&lt;/code>&lt;/td>
&lt;td>Syntax &lt;code>proto2&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SYNTAX_PROTO3&lt;/code>&lt;/td>
&lt;td>Syntax &lt;code>proto3&lt;/code>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="timestamp">Timestamp&lt;/h2>
&lt;p>A Timestamp represents a point in time independent of any time zone or calendar,
represented as seconds and fractions of seconds at nanosecond resolution in UTC
Epoch time. It is encoded using the Proleptic Gregorian Calendar which extends
the Gregorian calendar backwards to year one. It is encoded assuming all minutes
are 60 seconds long, i.e. leap seconds are &amp;quot;smeared&amp;quot; so that no leap second
table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we
can convert to and from RFC 3339 date strings. See
&lt;a href="https://www.ietf.org/rfc/rfc3339.txt">https://www.ietf.org/rfc/rfc3339.txt&lt;/a>.&lt;/p>
&lt;p>Example 1: Compute Timestamp from POSIX &lt;code>time()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Timestamp&lt;/span> &lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_seconds&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_nanos&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example 2: Compute Timestamp from POSIX &lt;code>gettimeofday()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">timeval&lt;/span> &lt;span style="color:#000">tv&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">gettimeofday&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">tv&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Timestamp&lt;/span> &lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_seconds&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tv&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">tv_sec&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_nanos&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tv&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">tv_usec&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example 3: Compute Timestamp from Win32 &lt;code>GetSystemTimeAsFileTime()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">FILETIME&lt;/span> &lt;span style="color:#000">ft&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">GetSystemTimeAsFileTime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">ft&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">UINT64&lt;/span> &lt;span style="color:#000">ticks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(((&lt;/span>&lt;span style="color:#000">UINT64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#000">ft&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dwHighDateTime&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">32&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">|&lt;/span> &lt;span style="color:#000">ft&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dwLowDateTime&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">Timestamp&lt;/span> &lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_seconds&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">INT64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">ticks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10000000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11644473600LL&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_nanos&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">INT32&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">ticks&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10000000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example 4: Compute Timestamp from Java &lt;code>System.currentTimeMillis()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">long&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">millis&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">System&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">currentTimeMillis&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">Timestamp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">timestamp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">newBuilder&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">setSeconds&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">millis&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">setNanos&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">millis&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">1000000&lt;/span>&lt;span style="color:#000;font-weight:bold">)).&lt;/span>&lt;span style="color:#c4a000">build&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example 5: Compute Timestamp from current time in Python.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">now&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">seconds&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">nanos&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">now&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">seconds&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">9&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">timestamp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">seconds&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">seconds&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">nanos&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">nanos&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>seconds&lt;/code>&lt;/td>
&lt;td>&lt;code>int64&lt;/code>&lt;/td>
&lt;td>
Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>nanos&lt;/code>&lt;/td>
&lt;td>&lt;code>int32&lt;/code>&lt;/td>
&lt;td>
Non-negative fractions of a second at nanosecond resolution. Negative
second values with fractions must still have non-negative nanos values
that count forward in time. Must be from 0 to 999,999,999 inclusive.
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="type">Type&lt;/h2>
&lt;p>A protocol buffer message type.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>name&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>The fully qualified message name.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fields&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#field">Field&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The list of fields.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>oneofs&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>
The list of types appearing in &lt;code>oneof&lt;/code> definitions in this
type.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>options&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#option">Option&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The protocol buffer options.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>source_context&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#source-context">SourceContext&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The source context.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>syntax&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#syntax">Syntax&lt;/a>&lt;/code>
&lt;/td>
&lt;td>The source syntax.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="uint32-value">UInt32Value&lt;/h2>
&lt;p>Wrapper message for &lt;code>uint32&lt;/code>.&lt;/p>
&lt;p>The JSON representation for &lt;code>UInt32Value&lt;/code> is JSON number.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code>uint32&lt;/code>&lt;/td>
&lt;td>The uint32 value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="uint64-value">UInt64Value&lt;/h2>
&lt;p>Wrapper message for &lt;code>uint64&lt;/code>.&lt;/p>
&lt;p>The JSON representation for &lt;code>UInt64Value&lt;/code> is JSON string.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>value&lt;/code>&lt;/td>
&lt;td>&lt;code>uint64&lt;/code>&lt;/td>
&lt;td>The uint64 value.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="value">Value&lt;/h2>
&lt;p>&lt;code>Value&lt;/code> represents a dynamically typed value which can be either null, a number,
a string, a boolean, a recursive struct value, or a list of values. A producer
of value is expected to set one of that variants, absence of any variant
indicates an error.&lt;/p>
&lt;p>The JSON representation for &lt;code>Value&lt;/code> is JSON value.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td colspan="3">Union field, only one of the following:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>null_value&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#null-value">NullValue&lt;/a>&lt;/code>
&lt;/td>
&lt;td>Represents a null value.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>number_value&lt;/code>&lt;/td>
&lt;td>&lt;code>double&lt;/code>&lt;/td>
&lt;td>
Represents a double value. Note that attempting to serialize NaN or
Infinity results in error. (We can't serialize these as string "NaN" or
"Infinity" values like we do for regular fields, because they would
parse as string_value, not number_value).
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string_value&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>Represents a string value.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>bool_value&lt;/code>&lt;/td>
&lt;td>&lt;code>bool&lt;/code>&lt;/td>
&lt;td>Represents a boolean value.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>struct_value&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#struct">Struct&lt;/a>&lt;/code>
&lt;/td>
&lt;td>Represents a structured value.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>list_value&lt;/code>&lt;/td>
&lt;td>
&lt;code>&lt;a href="#list-value">ListValue&lt;/a>&lt;/code>
&lt;/td>
&lt;td>Represents a repeated &lt;code>Value&lt;/code>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>